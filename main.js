/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => WordPopupPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// pattern_matcher.ts
var TrieNode = class {
  constructor() {
    this.children = {};
    this.value = null;
  }
};
var Trie = class {
  constructor(terms) {
    this.root = new TrieNode();
    for (const { term, value } of terms) {
      this.insert(term, value);
    }
  }
  insert(term, value) {
    let node = this.root;
    for (const char of term) {
      if (!node.children[char]) {
        node.children[char] = new TrieNode();
      }
      node = node.children[char];
    }
    node.value = value;
  }
  lookup(query) {
    const results = [];
    const visited = new Set();
    this._lookupHelper(this.root, query, 0, results, [], visited);
    return results;
  }
  _lookupHelper(node, query, index, results, wildcardMatches, visited) {
    if (index === query.length) {
      if (node.value !== null && !visited.has(node)) {
        results.push({
          value: node.value,
          match: wildcardMatches.slice()
        });
        visited.add(node);
      }
      return;
    }
    const char = query[index];
    if (node.children[char]) {
      this._lookupHelper(node.children[char], query, index + 1, results, wildcardMatches, visited);
    }
    if (char.match(/^[0-9a-z]+$/) && node.children["*"]) {
      const newWildcardMatches = wildcardMatches.concat(char);
      this._lookupHelper(node.children["*"], query, index + 1, results, newWildcardMatches, visited);
    }
  }
  typeAhead(query) {
    let nodes = [{ node: this.root, index: 0 }];
    const results = [];
    const collectedNodes = new Set();
    while (nodes.length > 0) {
      let nextNodes = [];
      for (const { node, index } of nodes) {
        if (index === query.length) {
          this._collectValues(node, results, collectedNodes);
        } else {
          const char = query[index];
          if (node.children[char]) {
            nextNodes.push({
              node: node.children[char],
              index: index + 1
            });
          }
          if (char.match(/^[0-9a-z]+$/) && node.children["*"]) {
            nextNodes.push({
              node: node.children["*"],
              index: index + 1
            });
          }
        }
      }
      nodes = nextNodes;
    }
    return results;
  }
  _collectValues(startNode, results, collectedNodes) {
    let queue = [startNode];
    const visitedNodes = new Set();
    while (queue.length > 0) {
      const node = queue.shift();
      if (visitedNodes.has(node)) {
        continue;
      }
      visitedNodes.add(node);
      if (node.value !== null && !collectedNodes.has(node)) {
        results.push(node.value);
        collectedNodes.add(node);
      }
      for (const childNode of Object.values(node.children)) {
        queue.push(childNode);
      }
    }
  }
};
var RegexMatcher = class {
  constructor(patterns) {
    this.patterns = patterns.map((p) => ({
      regex: new RegExp(p.pattern),
      replacements: p.replacements
    }));
  }
  addPattern(pattern) {
    this.patterns.push({
      regex: new RegExp(pattern.pattern),
      replacements: pattern.replacements
    });
  }
  getSuggestions(input) {
    const suggestions = [];
    let fastReplace = false;
    for (const pattern of this.patterns) {
      const matches = input.match(pattern.regex);
      if (matches) {
        for (const replacement of pattern.replacements) {
          let result = replacement;
          for (let i = 1; i < matches.length; i++) {
            result = result.replace(`$${i}`, matches[i] || "");
          }
          suggestions.push(result);
        }
      }
    }
    return { suggestions, fastReplace };
  }
};
var SuggestionMatcher = class {
  constructor(patterns) {
    const trieTerms = patterns.flatMap((conf) => {
      if (!conf.type) {
        return [{ term: conf.pattern, value: conf }];
      }
      return [];
    });
    this.trie = new Trie(trieTerms);
    const regexTerms = patterns.flatMap((conf) => {
      if (conf.type && conf.type === "regex") {
        return [conf];
      }
      return [];
    });
    this.regexes = new RegexMatcher(regexTerms);
  }
  replacePlaceholders(value, matches) {
    return value.replace(/\$([1-9]\d*)/g, (match, indexStr) => {
      const index = parseInt(indexStr, 10) - 1;
      if (index < matches.length) {
        return matches[index];
      }
      return match;
    });
  }
  getMatchingPatterns(searchString) {
    return this.trie.lookup(searchString);
  }
  getSuggestions(searchString) {
    const results = this.trie.lookup(searchString);
    const suggestions = [];
    let fastReplace = false;
    results.forEach(({ value: conf, match: wildcardMatches }) => {
      conf.replacements.forEach((replacement) => {
        const suggestion = this.replacePlaceholders(replacement, wildcardMatches);
        suggestions.push(suggestion);
      });
      fastReplace = fastReplace || !!conf.fastReplace;
    });
    const rs = this.regexes.getSuggestions(searchString);
    suggestions.push(...rs.suggestions);
    fastReplace = (fastReplace || rs.fastReplace) && suggestions.length === 1;
    return { suggestions, fastReplace };
  }
};

// config.ts
var DEFAULT_CONFIG = {
  renderMath: false,
  patterns: [
    { pattern: "or", replacements: ["\\lor"], fastReplace: true },
    { pattern: "and", replacements: ["\\land"], fastReplace: true },
    { pattern: "not", replacements: ["\\lnot"], fastReplace: true },
    { pattern: "=>", replacements: ["\\implies"], fastReplace: true },
    { pattern: "<=>", replacements: ["\\iff"], fastReplace: true },
    { pattern: "a", replacements: ["\\alpha", "\\aleph"] },
    { pattern: "b", replacements: ["\\beta", "\\beth"] },
    { pattern: "g", replacements: ["\\gamma", "\\gimel"] },
    { pattern: "d", replacements: ["\\delta", "\\daleth"] },
    { pattern: "e", replacements: ["\\epsilon", "\\varepsilon"] },
    { pattern: "z", replacements: ["\\zeta"] },
    { pattern: "h", replacements: ["\\eta"] },
    { pattern: "t", replacements: ["\\theta", "\\vartheta"] },
    { pattern: "i", replacements: ["\\iota"] },
    { pattern: "k", replacements: ["\\kappa"] },
    { pattern: "l", replacements: ["\\lambda"] },
    { pattern: "m", replacements: ["\\mu"] },
    { pattern: "n", replacements: ["\\nu"] },
    { pattern: "x", replacements: ["\\xi"] },
    { pattern: "o", replacements: ["\\omicron"] },
    { pattern: "p", replacements: ["\\pi", "\\varpi"] },
    { pattern: "r", replacements: ["\\rho", "\\varrho"] },
    { pattern: "s", replacements: ["\\sigma", "\\varsigma"] },
    { pattern: "u", replacements: ["\\upsilon"] },
    { pattern: "f", replacements: ["\\phi", "\\varphi"] },
    { pattern: "c", replacements: ["\\chi"] },
    { pattern: "y", replacements: ["\\psi"] },
    { pattern: "w", replacements: ["\\omega"] },
    { pattern: "E", replacements: ["\\exists"] },
    { pattern: "G", replacements: ["\\Gamma"] },
    { pattern: "D", replacements: ["\\Delta"] },
    { pattern: "T", replacements: ["\\Theta"] },
    { pattern: "I", replacements: ["\\Iota"] },
    { pattern: "L", replacements: ["\\Lambda"] },
    { pattern: "X", replacements: ["\\Xi"] },
    { pattern: "P", replacements: ["\\Pi"] },
    { pattern: "S", replacements: ["\\Sigma"] },
    { pattern: "U", replacements: ["\\Upsilon"] },
    { pattern: "F", replacements: ["\\Phi", "\\forall"] },
    { pattern: "Y", replacements: ["\\Psi"] },
    { pattern: "W", replacements: ["\\Omega"] },
    { pattern: "(", replacements: ["\\big(", "\\Big(", "\\bigg(", "\\Bigg("] },
    { pattern: ")", replacements: ["\\big)", "\\Big)", "\\bigg)", "\\Bigg)"] },
    { pattern: "[", replacements: ["\\big[", "\\Big[", "\\bigg[", "\\Bigg[", "\\lceil", "\\lfloor", "\\ulcorner", "\\llcorner"] },
    { pattern: "]", replacements: ["\\big]", "\\Big]", "\\bigg]", "\\Bigg]", "\\rceil", "\\rfloor", "\\urcorner", "\\lrcorner"] },
    { pattern: "->", replacements: ["\\rightarrow", "\\to"] },
    { pattern: "<-", replacements: ["\\leftarrow"] },
    { pattern: "<->", replacements: ["\\leftrightarrow"] },
    { pattern: "=>", replacements: ["\\implies"] },
    { pattern: "<=", replacements: ["\\leq"] },
    { pattern: ">=", replacements: ["\\geq"] },
    { pattern: "+", replacements: ["+"] },
    { pattern: "-", replacements: ["-"] },
    { pattern: "/", replacements: ["\\div"] },
    { pattern: "sum", replacements: ["\\sum"] },
    { pattern: "int", replacements: ["\\int"] },
    { pattern: "lim", replacements: ["\\lim"] },
    { pattern: "inf", replacements: ["\\infty"] },
    { pattern: "sqrt", replacements: ["\\sqrt"] },
    { pattern: "prod", replacements: ["\\prod"] },
    { pattern: "=", replacements: ["="] },
    { pattern: "!=", replacements: ["\\neq"] },
    { pattern: "~=", replacements: ["\\approx"] },
    { pattern: "~~", replacements: ["\\sim"] },
    { pattern: "<<", replacements: ["\\ll"] },
    { pattern: ">>", replacements: ["\\gg"] },
    { pattern: "in", replacements: ["\\in"], fastReplace: true },
    { pattern: "ni", replacements: ["\\ni"], fastReplace: true },
    { pattern: "subset", replacements: ["\\subset", "\\subseteq"] },
    { pattern: "supset", replacements: ["\\supset", "\\supseteq"] },
    { pattern: "empty", replacements: ["\\emptyset"], fastReplace: true },
    { pattern: "...", replacements: ["\\ldots"] },
    { pattern: "\xB0", replacements: ["\\degree"] },
    { pattern: "\xA3", replacements: ["\\pounds"] },
    { pattern: "$", replacements: ["\\$"] },
    { pattern: "%", replacements: ["\\%"] },
    { pattern: "&", replacements: ["\\&"] },
    { pattern: "hat", replacements: ["\\hat{}"] },
    { pattern: "bar", replacements: ["\\bar{}"] },
    { pattern: "tilde", replacements: ["\\tilde{}"] },
    { pattern: "vec", replacements: ["\\vec{}"] },
    { pattern: "sin", replacements: ["\\sin"], fastReplace: true },
    { pattern: "cos", replacements: ["\\cos"], fastReplace: true },
    { pattern: "tan", replacements: ["\\tan"], fastReplace: true },
    { pattern: "log", replacements: ["\\log"], fastReplace: true },
    { pattern: "ln", replacements: ["\\ln"], fastReplace: true },
    { pattern: "exp", replacements: ["\\exp"], fastReplace: true },
    { pattern: "frac", replacements: ["T:\\frac{$1}{$2}"] },
    { pattern: "binom", replacements: ["\\binom{}{}"] },
    { type: "regex", pattern: "(.*)_over$", replacements: ["\\overline{$1}"] },
    { pattern: "underline", replacements: ["\\underline{}"] },
    { pattern: "overset", replacements: ["\\overset{}{}}"] },
    { pattern: "underset", replacements: ["\\underset{}{}}"] },
    { pattern: "forall", replacements: ["\\forall"], fastReplace: true },
    { pattern: "exists", replacements: ["\\exists"], fastReplace: true },
    { pattern: "nexists", replacements: ["\\nexists"], fastReplace: true },
    { pattern: "aleph", replacements: ["\\aleph"] },
    { pattern: "hbar", replacements: ["\\hbar"] },
    { pattern: "ell", replacements: ["\\ell"] },
    { pattern: "Re", replacements: ["\\Re"] },
    { pattern: "Im", replacements: ["\\Im"] }
  ]
};
var ConfigManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async saveConfig(config) {
    await this.plugin.saveData(this.config);
  }
  async loadConfig() {
    this.config = Object.assign({}, DEFAULT_CONFIG, await this.plugin.loadData());
    this.matcher = new SuggestionMatcher(this.config.patterns);
  }
  async updateConfig(newConfig) {
    this.config = newConfig;
    await this.saveConfig(this.config);
    this.matcher = new SuggestionMatcher(this.config.patterns);
  }
  async resetConfig() {
    await this.updateConfig(DEFAULT_CONFIG);
  }
};

// suggestion_popup.ts
var import_obsidian = __toModule(require("obsidian"));
var TEMPLATE_PREFIX = "T:";
var SuggestionPopup = class {
  constructor() {
    this.element = this.createElement();
    this.isVisible = false;
    this.currentMatch = null;
    this.currentReplacements = null;
    this.fastReplace = false;
    this.selectedIndex = -1;
    this.inputHandler = null;
    this.view = null;
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    document.addEventListener("click", this.handleDocumentClick);
    document.addEventListener("keydown", this.handleKeyDown);
  }
  createElement() {
    const popup = document.createElement("div");
    popup.style.cssText = `
            position: absolute;
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            padding: 2px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: none;
            white-space: nowrap;
            z-index: 10000;
        `;
    document.body.appendChild(popup);
    return popup;
  }
  show(x, y, match, replacements, inputHandler, fastReplace = false, view) {
    this.currentMatch = match;
    this.currentReplacements = replacements;
    this.selectedIndex = -1;
    this.inputHandler = inputHandler;
    this.fastReplace = fastReplace && replacements.length === 1;
    this.element.style.left = `${x + 5}px`;
    this.element.style.bottom = `${window.innerHeight - y}px`;
    this.element.style.top = "auto";
    this.element.style.display = "block";
    this.isVisible = true;
    this.view = view;
    this.updateContent(view);
  }
  hide() {
    this.element.style.display = "none";
    this.element.innerHTML = "";
    this.isVisible = false;
    this.selectedIndex = -1;
    this.currentMatch = null;
    this.currentReplacements = null;
    this.view = null;
  }
  updateContent(view) {
    if (!this.currentMatch || !this.currentReplacements)
      return;
    this.element.innerHTML = "";
    const styleElement = document.createElement("style");
    const cssRule = `
          p {
            display: inline;
            margin: 0;
            padding: 0;
          }
        `;
    styleElement.textContent = cssRule;
    this.element.appendChild(styleElement);
    this.currentReplacements.forEach((option, index) => {
      const appliedReplacement = option.startsWith(TEMPLATE_PREFIX) ? option.slice(TEMPLATE_PREFIX.length) : option;
      const span = document.createElement("span");
      span.id = `suggestion-${index}`;
      span.style.cssText = `
                cursor: pointer;
                padding: 5px;
                display: inline;
            `;
      span.addEventListener("mouseover", () => {
        if (index !== this.selectedIndex) {
          span.style.background = "var(--background-secondary)";
        }
      });
      span.addEventListener("mouseout", () => {
        if (index !== this.selectedIndex) {
          span.style.background = "var(--background-primary)";
        }
      });
      span.addEventListener("click", () => {
        this.selectSuggestion(index);
      });
      const indicatorSpan = document.createElement("span");
      if (this.fastReplace && this.currentReplacements.length === 1) {
        indicatorSpan.style.cssText = `
                    color: #22c55e;
                    margin-right: 2px;
                    font-size: 0.6em;
                `;
        indicatorSpan.textContent = "\u26A1";
      } else {
        indicatorSpan.style.cssText = `
                    font-size: 0.7em;
                    color: #888;
                    margin-right: 2px;
                `;
        indicatorSpan.textContent = `${index + 1}.`;
      }
      const mathSpan = document.createElement("span");
      span.appendChild(indicatorSpan);
      span.appendChild(mathSpan);
      this.element.appendChild(span);
      import_obsidian.MarkdownRenderer.renderMarkdown(`$${appliedReplacement}$`, mathSpan, view.file.path, view);
    });
  }
  updateSelectedSuggestion() {
    const suggestions = this.element.querySelectorAll('span[id^="suggestion-"]');
    suggestions.forEach((span) => {
      span.style.background = "var(--background-primary)";
    });
    if (this.selectedIndex >= 0) {
      const selectedSpan = this.element.querySelector(`#suggestion-${this.selectedIndex}`);
      if (selectedSpan) {
        selectedSpan.style.background = "var(--background-secondary)";
      }
    }
  }
  selectSuggestion(index) {
    if (!this.currentReplacements || !this.view)
      return;
    if (index >= 0 && index < this.currentReplacements.length) {
      const replacement = this.currentReplacements[index];
      if (replacement.startsWith(TEMPLATE_PREFIX)) {
        const form = new TemplateForm(replacement.slice(TEMPLATE_PREFIX.length), this.inputHandler);
        form.show();
      } else {
        const start = this.view.editor.offsetToPos(this.view.editor.posToOffset(this.view.editor.getCursor()) - this.currentMatch.length);
        this.view.editor.replaceRange(replacement, start, this.view.editor.getCursor());
      }
      this.hide();
    }
  }
  handleKeyDown(e) {
    if (!this.isVisible || !this.currentReplacements)
      return;
    if (this.fastReplace && !/^[a-zA-Z0-9]$/.test(e.key) && !["Escape", "Tab", "Backspace"].includes(e.key)) {
      this.selectSuggestion(0);
      return;
    }
    switch (e.key) {
      case "Escape":
        this.hide();
        e.preventDefault();
        break;
      case "Tab":
        e.preventDefault();
        if (this.selectedIndex < this.currentReplacements.length - 1) {
          this.selectedIndex++;
        } else {
          this.selectedIndex = 0;
        }
        this.updateSelectedSuggestion();
        break;
      case "Enter":
        if (this.selectedIndex >= 0) {
          e.preventDefault();
          this.selectSuggestion(this.selectedIndex);
        }
        break;
      default:
        if (e.key >= "1" && e.key <= "9") {
          const index = parseInt(e.key) - 1;
          if (index < this.currentReplacements.length) {
            this.selectSuggestion(index);
            e.preventDefault();
          }
        }
    }
  }
  handleDocumentClick(e) {
    if (this.isVisible && !this.element.contains(e.target)) {
      this.hide();
    }
  }
  destroy() {
    document.removeEventListener("click", this.handleDocumentClick);
    document.removeEventListener("keydown", this.handleKeyDown);
    if (this.element && this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
  }
};

// match_form.ts
var MatchForm2 = class {
  constructor(configManager) {
    this.configManager = configManager;
    this.element = this.createElement();
  }
  createElement() {
    const form = document.createElement("div");
    form.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            border-radius: 4px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 10003;
            max-width: 80%;
            max-height: 80%;
            overflow-y: auto;
            display: none;
        `;
    document.body.appendChild(form);
    return form;
  }
  updateContent() {
    var _a;
    const fastReplaceHtml = `
            <div class="fast-replace-section" style="margin-top: 15px; margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 8px;">
                    <input type="checkbox" id="fastReplace" ${((_a = this.matchData) == null ? void 0 : _a.fastReplace) ? "checked" : ""}>
                    <span style="display: flex; align-items: center;">
                        Fast Replace
                        <span style="color: #22c55e; margin-left: 4px;">\u26A1</span>
                    </span>
                </label>
                <div style="font-size: 0.8em; color: #666; margin-top: 4px;">
                    Enables quick replacement with any non-alphanumeric character
                </div>
            </div>
        `;
    this.element.innerHTML = `
            <h2>${this.matchData ? "Edit Pattern" : "Create New Pattern"}</h2>
            <label for="pattern">Pattern (regex):</label>
            <input type="text" id="pattern" value="${this.matchData ? this.matchData.pattern : ""}"><br><br>
            ${fastReplaceHtml}
            <div id="replacements"></div>
            <button id="addReplacement">Add Replacement</button><br><br>
            <button id="saveMatch">Save</button>
            <button id="cancelMatch">Cancel</button>
        `;
    if (this.matchData) {
      this.matchData.replacements.forEach((replacement) => {
        const isTemplate = replacement.startsWith("T:");
        const actualReplacement = isTemplate ? replacement.slice(2) : replacement;
        this.addReplacementField(actualReplacement, isTemplate);
      });
    } else {
      this.addReplacementField();
    }
    this.attachEventListeners();
  }
  attachEventListeners() {
    const addReplacementButton = this.element.querySelector("#addReplacement");
    const saveMatchButton = this.element.querySelector("#saveMatch");
    const cancelMatchButton = this.element.querySelector("#cancelMatch");
    if (addReplacementButton && saveMatchButton && cancelMatchButton) {
      addReplacementButton.addEventListener("click", () => {
        this.addReplacementField();
        this.updateFastReplaceState();
      });
      saveMatchButton.addEventListener("click", () => this.saveMatch());
      cancelMatchButton.addEventListener("click", () => this.hide());
    }
  }
  updateFastReplaceState() {
    const fastReplaceCheckbox = this.element.querySelector("#fastReplace");
    const replacements = this.element.querySelectorAll("#replacements fieldset");
    if (fastReplaceCheckbox) {
      if (replacements.length > 1) {
        fastReplaceCheckbox.checked = false;
        fastReplaceCheckbox.disabled = true;
        fastReplaceCheckbox.title = "Fast replace is only available for patterns with a single replacement";
      } else {
        fastReplaceCheckbox.disabled = false;
        fastReplaceCheckbox.title = "";
      }
    }
  }
  addReplacementField(replacement = "", isTemplate = false) {
    const replacementsDiv = this.element.querySelector("#replacements");
    if (!replacementsDiv)
      return;
    const fieldSet = document.createElement("fieldset");
    fieldSet.style.cssText = `
            margin-bottom: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        `;
    fieldSet.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <div style="flex-grow: 1;">
                    <label for="replacement">Replacement:</label>
                    <input type="text" class="replacement" value="${replacement}" style="width: 100%;">
                </div>
                <div>
                    <label style="display: flex; align-items: center; gap: 4px;">
                        <input type="checkbox" class="template-checkbox" ${isTemplate ? "checked" : ""}>
                        Template
                    </label>
                </div>
                <button class="removeReplacement" style="margin-left: auto;">Remove</button>
            </div>
        `;
    const removeButton = fieldSet.querySelector(".removeReplacement");
    if (removeButton) {
      removeButton.addEventListener("click", () => {
        fieldSet.remove();
        this.updateFastReplaceState();
      });
    }
    replacementsDiv.appendChild(fieldSet);
  }
  saveMatch() {
    const patternInput = this.element.querySelector("#pattern");
    const fastReplaceCheckbox = this.element.querySelector("#fastReplace");
    const replacementFieldsets = this.element.querySelectorAll("#replacements fieldset");
    if (!patternInput)
      return;
    const pattern = patternInput.value;
    const replacements = Array.from(replacementFieldsets).map((fieldset) => {
      const replacementInput = fieldset.querySelector(".replacement");
      const templateCheckbox = fieldset.querySelector(".template-checkbox");
      const replacementValue = (replacementInput == null ? void 0 : replacementInput.value) || "";
      const isTemplate = (templateCheckbox == null ? void 0 : templateCheckbox.checked) || false;
      return isTemplate ? `T:${replacementValue}` : replacementValue;
    });
    const fastReplace = (fastReplaceCheckbox == null ? void 0 : fastReplaceCheckbox.checked) || false;
    if (this.matchData) {
      const oldPatternIndex = this.config.patterns.findIndex((p) => p.pattern === this.matchData.pattern);
      if (oldPatternIndex !== -1) {
        this.config.patterns.splice(oldPatternIndex, 1);
      }
    }
    this.config.patterns.push({
      pattern,
      replacements,
      fastReplace
    });
    this.configManager.updateConfig(this.config);
    this.hide();
  }
  show(matchData = null) {
    this.matchData = matchData;
    this.updateContent();
    this.element.style.display = "block";
  }
  hide() {
    this.element.style.display = "none";
    this.element.innerHTML = "";
  }
};

// config_dialog.ts
var import_obsidian2 = __toModule(require("obsidian"));
var ConfigDialog = class extends import_obsidian2.Component {
  constructor(configManager) {
    super();
    this.configManager = configManager;
    this.config = configManager.config;
    this.isVisible = false;
  }
  onload() {
    this.element = this.createElement();
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.matchForm = new MatchForm2(this.configManager);
  }
  createElement() {
    const dialog = document.createElement("div");
    dialog.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--background-secondary);
            border: 1px solid var(--background-modifier-border-focus);
            border-radius: 4px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: none;
            z-index: 10002;
            max-width: 80%;
            max-height: 80%;
            width: auto;
            overflow-y: auto;
        `;
    document.body.appendChild(dialog);
    return dialog;
  }
  createEditButton(conf) {
    const button = document.createElement("button");
    button.innerHTML = "\u270F\uFE0F";
    button.style.cssText = `
            margin-left: 8px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 16px;
            padding: 2px 6px;
            border-radius: 4px;
            vertical-align: middle;
        `;
    button.title = "Edit pattern";
    this.registerDomEvent(button, "click", (e) => {
      e.stopPropagation();
      this.matchForm.show(conf);
      this.hide();
    });
    return button;
  }
  show(selectedText) {
    this.element.innerHTML = "";
    const title = document.createElement("h2");
    title.innerHTML = `Matching Patterns for <code>${selectedText}</code>`;
    this.element.appendChild(title);
    const matches = this.configManager.matcher.getMatchingPatterns(selectedText);
    for (const { value, wildcardMatches } of matches) {
      const { pattern, replacements, fastReplace } = value;
      const patternDiv = document.createElement("div");
      const patternHeader = document.createElement("h3");
      patternHeader.style.display = "flex";
      patternHeader.style.alignItems = "center";
      if (fastReplace && replacements.length === 1) {
        const fastReplaceIcon = document.createElement("span");
        fastReplaceIcon.style.cssText = `
                    color: #22c55e;
                    margin-right: 8px;
                `;
        fastReplaceIcon.title = "Fast Replace Enabled";
        fastReplaceIcon.textContent = "\u26A1";
        patternHeader.appendChild(fastReplaceIcon);
      }
      const patternText = document.createElement("span");
      patternText.innerHTML = `Pattern: <code>${pattern}</code>`;
      patternHeader.appendChild(patternText);
      patternHeader.appendChild(this.createEditButton(value));
      patternDiv.appendChild(patternHeader);
      const replacementsList = document.createElement("ul");
      replacementsList.innerHTML = replacements.map((r) => {
        const rendered = (() => {
          if (r.startsWith("T:")) {
            return r.slice(2);
          } else {
            return this.configManager.matcher.replacePlaceholders(r, wildcardMatches);
          }
        })();
        return `<li>$${rendered}$ <code>[${r}]</code></li>`;
      }).join("");
      patternDiv.appendChild(replacementsList);
      this.element.appendChild(patternDiv);
      window.MathJax.typesetPromise([patternDiv]);
    }
    if (matches.length === 0) {
      const noMatch = document.createElement("p");
      noMatch.textContent = "No matching patterns found.";
      this.element.appendChild(noMatch);
    }
    const closeButton = document.createElement("button");
    closeButton.textContent = "Close";
    closeButton.onclick = () => {
      this.hide();
    };
    this.element.appendChild(closeButton);
    this.element.style.display = "block";
    this.isVisible = true;
  }
  hide() {
    this.element.style.display = "none";
    this.isVisible = false;
  }
  handleDocumentClick(e) {
    if (this.isVisible && !this.element.contains(e.target)) {
      this.hide();
    }
  }
};

// selection_button.ts
var import_obsidian3 = __toModule(require("obsidian"));
var SelectionButton = class extends import_obsidian3.Component {
  constructor(configManager, configDialog) {
    super();
    this.configManager = configManager;
    this.selectionTimeout = null;
    this.configDialog = configDialog;
    this.hasMatch = false;
  }
  onload() {
    this.element = this.createElement();
    this.attachEventListeners();
  }
  createElement() {
    const button = document.createElement("button");
    button.style.cssText = `
            position: absolute;
            display: none;
            border: 1px solid #ccc;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            z-index: 10001;
            font-size: 16px;
            line-height: 24px;
            text-align: center;
            padding: 0;
        `;
    document.body.appendChild(button);
    return button;
  }
  attachEventListeners() {
    this.registerDomEvent(this.element, "click", () => {
      var _a, _b, _c;
      const selectedText = (_b = (_a = window.getSelection()) == null ? void 0 : _a.toString().trim()) != null ? _b : "";
      if (this.hasMatch) {
        this.configDialog.show(selectedText);
      } else {
        const matchForm = new MatchForm(this.configManager, { pattern: selectedText, replacements: [] });
        matchForm.show();
      }
      (_c = window.getSelection()) == null ? void 0 : _c.empty();
      this.hide();
    });
    this.registerDomEvent(document, "keyup", () => {
      this.hide();
    });
    this.registerDomEvent(document, "mouseup", () => {
      this.handleSelection();
    });
  }
  show(x, y) {
    this.element.style.left = `${x}px`;
    this.element.style.top = `${y}px`;
    this.element.style.display = "block";
  }
  hide() {
    this.element.style.display = "none";
  }
  handleSelection() {
    if (this.selectionTimeout) {
      clearTimeout(this.selectionTimeout);
    }
    this.selectionTimeout = window.setTimeout(() => {
      var _a;
      const selection = window.getSelection();
      const selectedText = (_a = selection == null ? void 0 : selection.toString().trim()) != null ? _a : "";
      if (selectedText.length > 0) {
        this.hasMatch = this.configManager.matcher.getMatchingPatterns(selectedText).length > 0;
        this.updateButtonAppearance();
        const range = selection == null ? void 0 : selection.getRangeAt(0);
        const rect = range == null ? void 0 : range.getBoundingClientRect();
        if (rect) {
          this.show(rect.right + window.pageXOffset, rect.top + window.pageYOffset);
        }
      } else {
        this.hide();
      }
    }, 70);
  }
  updateButtonAppearance() {
    if (this.hasMatch) {
      this.element.textContent = "\u2699\uFE0F";
      this.element.title = "View matching patterns";
    } else {
      this.element.textContent = "+";
      this.element.title = "Add new pattern";
    }
  }
};

// main.ts
var WordPopupPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    this.configManager = new ConfigManager(this);
    await this.configManager.loadConfig();
    this.suggestionPopup = new SuggestionPopup();
    this.configDialog = new ConfigDialog(this.configManager);
    this.selectionButton = new SelectionButton(this.configManager, this.configDialog);
    this.addChild(this.selectionButton);
    this.addChild(this.configDialog);
    this.registerEvent(this.app.workspace.on("editor-change", (editor, view) => {
      this.handleEditorChange(editor, view);
    }));
    console.log("Plugin Loaded");
  }
  onunload() {
    this.suggestionPopup.destroy();
  }
  async handleEditorChange(editor, view) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const wordUnderCursor = this.getWordUnderCursor(line, cursor.ch);
    const suggestions = this.configManager.matcher.getSuggestions(wordUnderCursor);
    if (suggestions.suggestions.length > 0) {
      const coords = editor.coordsAtPos(cursor);
      if (!coords)
        return;
      this.suggestionPopup.show(coords.left, coords.top, wordUnderCursor, suggestions.suggestions, null, suggestions.fastReplace, view);
    } else {
      this.suggestionPopup.hide();
    }
  }
  hasUnclosedMathSection(str) {
    let inMathMode = false;
    let isDoubleDollar = false;
    for (let i = 0; i < str.length; i++) {
      if (str[i] === "\\" && i + 1 < str.length && str[i + 1] === "$") {
        i++;
        continue;
      }
      if (str[i] === "$" && i + 1 < str.length && str[i + 1] === "$") {
        if (!inMathMode) {
          inMathMode = true;
          isDoubleDollar = true;
          i++;
        } else if (isDoubleDollar) {
          inMathMode = false;
          isDoubleDollar = false;
          i++;
        }
        continue;
      }
      if (str[i] === "$") {
        if (!inMathMode) {
          inMathMode = true;
          isDoubleDollar = false;
        } else if (!isDoubleDollar) {
          inMathMode = false;
        }
      }
    }
    return inMathMode;
  }
  getWordUnderCursor(lineStr, cursorPos) {
    if (!this.hasUnclosedMathSection(lineStr.slice(0, cursorPos))) {
      return "";
    }
    let i = lineStr.length - 1;
    while (i >= 0) {
      if (lineStr[i] == "$" || lineStr[i] == " ") {
        i += 1;
        break;
      } else {
        i -= 1;
      }
    }
    if (i <= 0) {
      return lineStr;
    }
    return lineStr.substr(i);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJwYXR0ZXJuX21hdGNoZXIudHMiLCAiY29uZmlnLnRzIiwgInN1Z2dlc3Rpb25fcG9wdXAudHMiLCAibWF0Y2hfZm9ybS50cyIsICJjb25maWdfZGlhbG9nLnRzIiwgInNlbGVjdGlvbl9idXR0b24udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XG4gICAgQXBwLFxuICAgIEVkaXRvcixcbiAgICBNYXJrZG93blZpZXcsXG4gICAgUGx1Z2luLFxuICAgIFBvaW50LFxuICAgIEVkaXRvclBvc2l0aW9uLFxuICAgIE1hcmtkb3duUmVuZGVyZXJcbn0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgeyBDb25maWdNYW5hZ2VyIH0gZnJvbSBcIi4vY29uZmlnXCJcbmltcG9ydCB7IFN1Z2dlc3Rpb25Qb3B1cCB9IGZyb20gXCIuL3N1Z2dlc3Rpb25fcG9wdXBcIlxuaW1wb3J0IHsgQ29uZmlnRGlhbG9nIH0gZnJvbSBcIi4vY29uZmlnX2RpYWxvZ1wiXG5pbXBvcnQgeyBTZWxlY3Rpb25CdXR0b24gfSBmcm9tIFwiLi9zZWxlY3Rpb25fYnV0dG9uXCJcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JkUG9wdXBQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICAgIGNvbmZpZ01hbmFnZXI6IENvbmZpZ01hbmFnZXI7XG4gICAgc3VnZ2VzdGlvblBvcHVwOiBTdWdnZXN0aW9uUG9wdXA7XG4gICAgc2VsZWN0aW9uQnV0dG9uOiBTZWxlY3Rpb25CdXR0b247XG4gICAgY29uZmlnRGlhbG9nOiBDb25maWdEaWFsb2c7XG4gICAgcG9wdXBFbDogSFRNTEVsZW1lbnQ7XG4gICAgY29udGVudEVsOiBIVE1MRWxlbWVudDtcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gbmV3IENvbmZpZ01hbmFnZXIodGhpcyk7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnTWFuYWdlci5sb2FkQ29uZmlnKCk7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGlvblBvcHVwID0gbmV3IFN1Z2dlc3Rpb25Qb3B1cCgpO1xuICAgICAgICB0aGlzLmNvbmZpZ0RpYWxvZyA9IG5ldyBDb25maWdEaWFsb2codGhpcy5jb25maWdNYW5hZ2VyKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25CdXR0b24gPSBuZXcgU2VsZWN0aW9uQnV0dG9uKHRoaXMuY29uZmlnTWFuYWdlciwgdGhpcy5jb25maWdEaWFsb2cpO1xuXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5zZWxlY3Rpb25CdXR0b24pO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuY29uZmlnRGlhbG9nKTtcblxuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGVkaXRvciBjaGFuZ2UgZXZlbnRcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItY2hhbmdlJywgKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVkaXRvckNoYW5nZShlZGl0b3IsIHZpZXcpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIlBsdWdpbiBMb2FkZWRcIik7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGlvblBvcHVwLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBhc3luYyBoYW5kbGVFZGl0b3JDaGFuZ2UoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XG4gICAgICAgIGNvbnN0IHdvcmRVbmRlckN1cnNvciA9IHRoaXMuZ2V0V29yZFVuZGVyQ3Vyc29yKGxpbmUsIGN1cnNvci5jaCk7XG5cbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSB0aGlzLmNvbmZpZ01hbmFnZXIubWF0Y2hlci5nZXRTdWdnZXN0aW9ucyh3b3JkVW5kZXJDdXJzb3IpO1xuXG4gICAgICAgIGlmIChzdWdnZXN0aW9ucy5zdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjb29yZHMgPSBlZGl0b3IuY29vcmRzQXRQb3MoY3Vyc29yKTtcbiAgICAgICAgICAgIGlmICghY29vcmRzKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rpb25Qb3B1cC5zaG93KFxuICAgICAgICAgICAgICAgIGNvb3Jkcy5sZWZ0LFxuICAgICAgICAgICAgICAgIGNvb3Jkcy50b3AsXG4gICAgICAgICAgICAgICAgd29yZFVuZGVyQ3Vyc29yLFxuICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zLnN1Z2dlc3Rpb25zLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnMuZmFzdFJlcGxhY2UsXG4gICAgICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rpb25Qb3B1cC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNVbmNsb3NlZE1hdGhTZWN0aW9uKHN0cik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgaW5NYXRoTW9kZSA9IGZhbHNlO1xuICAgICAgICBsZXQgaXNEb3VibGVEb2xsYXIgPSBmYWxzZTtcblxuICAgICAgICAvLyBQcm9jZXNzIHN0cmluZyBjaGFyYWN0ZXIgYnkgY2hhcmFjdGVyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgZXNjYXBlZCBkb2xsYXIgc2lnbnNcbiAgICAgICAgICAgIGlmIChzdHJbaV0gPT09ICdcXFxcJyAmJiBpICsgMSA8IHN0ci5sZW5ndGggJiYgc3RyW2kgKyAxXSA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgICAgaSsrOyAvLyBTa2lwIHRoZSBlc2NhcGVkIGRvbGxhciBzaWduXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBkb3VibGUgZG9sbGFyIHNpZ25zXG4gICAgICAgICAgICBpZiAoc3RyW2ldID09PSAnJCcgJiYgaSArIDEgPCBzdHIubGVuZ3RoICYmIHN0cltpICsgMV0gPT09ICckJykge1xuICAgICAgICAgICAgICAgIGlmICghaW5NYXRoTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpbk1hdGhNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXNEb3VibGVEb2xsYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpKys7IC8vIFNraXAgc2Vjb25kIGRvbGxhclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEb3VibGVEb2xsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5NYXRoTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpc0RvdWJsZURvbGxhciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpKys7IC8vIFNraXAgc2Vjb25kIGRvbGxhclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSGFuZGxlIHNpbmdsZSBkb2xsYXIgc2lnbnNcbiAgICAgICAgICAgIGlmIChzdHJbaV0gPT09ICckJykge1xuICAgICAgICAgICAgICAgIGlmICghaW5NYXRoTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpbk1hdGhNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXNEb3VibGVEb2xsYXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc0RvdWJsZURvbGxhcikge1xuICAgICAgICAgICAgICAgICAgICBpbk1hdGhNb2RlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbk1hdGhNb2RlO1xuICAgIH1cblxuXG4gICAgZ2V0V29yZFVuZGVyQ3Vyc29yKGxpbmVTdHI6IHN0cmluZywgY3Vyc29yUG9zOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuaGFzVW5jbG9zZWRNYXRoU2VjdGlvbihsaW5lU3RyLnNsaWNlKDAsIGN1cnNvclBvcykpKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGkgPSBsaW5lU3RyLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgICAgICAgIGlmIChsaW5lU3RyW2ldID09ICckJyB8fCBsaW5lU3RyW2ldID09ICcgJyApe1xuICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpPD0wKSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZVN0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZVN0ci5zdWJzdHIoaSk7XG4gICAgfVxuXG59XG4iLCAiaW1wb3J0IHsgUGF0dGVybiB9IGZyb20gXCIuL2NvbmZpZ1wiXG5cbi8vIEludGVyZmFjZSBmb3IgdHJpZSB0ZXJtIHN0cnVjdHVyZVxuaW50ZXJmYWNlIFRyaWVUZXJtIHtcbiAgICB0ZXJtOiBzdHJpbmc7XG4gICAgdmFsdWU6IFBhdHRlcm47XG59XG5cbi8vIEludGVyZmFjZSBmb3IgbG9va3VwIHJlc3VsdHNcbmludGVyZmFjZSBMb29rdXBSZXN1bHQge1xuICAgIHZhbHVlOiBQYXR0ZXJuO1xuICAgIG1hdGNoOiBzdHJpbmdbXTtcbn1cblxuLy8gSW50ZXJmYWNlIGZvciBzdWdnZXN0aW9uIHJlc3VsdHNcbmludGVyZmFjZSBTdWdnZXN0aW9uUmVzdWx0IHtcbiAgICBzdWdnZXN0aW9uczogc3RyaW5nW107XG4gICAgZmFzdFJlcGxhY2U6IGJvb2xlYW47XG59XG5cbmNsYXNzIFRyaWVOb2RlIHtcbiAgICBjaGlsZHJlbjogeyBba2V5OiBzdHJpbmddOiBUcmllTm9kZSB9O1xuICAgIHZhbHVlOiBQYXR0ZXJuIHwgbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0ge307XG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgIH1cbn1cblxuY2xhc3MgVHJpZSB7XG4gICAgcHJpdmF0ZSByb290OiBUcmllTm9kZTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYW4gaW1tdXRhYmxlIFRyaWUuXG4gICAgICogQHBhcmFtIHRlcm1zIC0gQXJyYXkgb2YgdGVybXMgd2l0aCBhc3NvY2lhdGVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZXJtczogVHJpZVRlcm1bXSkge1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgVHJpZU5vZGUoKTtcbiAgICAgICAgZm9yIChjb25zdCB7IHRlcm0sIHZhbHVlIH0gb2YgdGVybXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHRlcm0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgYSB0ZXJtIHdpdGggaXRzIGFzc29jaWF0ZWQgdmFsdWUgaW50byB0aGUgdHJpZS5cbiAgICAgKiBAcGFyYW0gdGVybSAtIFRoZSB0ZXJtIHRvIGluc2VydCAobWF5IGNvbnRhaW4gd2lsZGNhcmRzICcqJykuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgdGVybS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGluc2VydCh0ZXJtOiBzdHJpbmcsIHZhbHVlOiBQYXR0ZXJuKTogdm9pZCB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5yb290O1xuICAgICAgICBmb3IgKGNvbnN0IGNoYXIgb2YgdGVybSkge1xuICAgICAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuW2NoYXJdKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbltjaGFyXSA9IG5ldyBUcmllTm9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bY2hhcl07XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvb2tzIHVwIGEgc3RyaW5nIGluIHRoZSB0cmllLCBtYXRjaGluZyB0ZXJtcyB0aGF0IG1heSBjb250YWluIHdpbGRjYXJkcyAnKicuXG4gICAgICogQ29sbGVjdHMgYWxsIG1hdGNoaW5nIHZhbHVlcyBhbmQgdGhlIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB3aWxkY2FyZHMuXG4gICAgICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHN0cmluZyB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIG1hdGNoaW5nIHJlc3VsdHMuXG4gICAgICovXG4gICAgbG9va3VwKHF1ZXJ5OiBzdHJpbmcpOiBMb29rdXBSZXN1bHRbXSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHM6IExvb2t1cFJlc3VsdFtdID0gW107XG4gICAgICAgIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0PFRyaWVOb2RlPigpO1xuXG4gICAgICAgIHRoaXMuX2xvb2t1cEhlbHBlcih0aGlzLnJvb3QsIHF1ZXJ5LCAwLCByZXN1bHRzLCBbXSwgdmlzaXRlZCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbG9va3VwSGVscGVyKFxuICAgICAgICBub2RlOiBUcmllTm9kZSxcbiAgICAgICAgcXVlcnk6IHN0cmluZyxcbiAgICAgICAgaW5kZXg6IG51bWJlcixcbiAgICAgICAgcmVzdWx0czogTG9va3VwUmVzdWx0W10sXG4gICAgICAgIHdpbGRjYXJkTWF0Y2hlczogc3RyaW5nW10sXG4gICAgICAgIHZpc2l0ZWQ6IFNldDxUcmllTm9kZT5cbiAgICApOiB2b2lkIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBxdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnZhbHVlICE9PSBudWxsICYmICF2aXNpdGVkLmhhcyhub2RlKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBub2RlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaDogd2lsZGNhcmRNYXRjaGVzLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmlzaXRlZC5hZGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFyID0gcXVlcnlbaW5kZXhdO1xuXG4gICAgICAgIC8vIEZpcnN0LCB0cnkgZXhhY3QgY2hhcmFjdGVyIG1hdGNoXG4gICAgICAgIGlmIChub2RlLmNoaWxkcmVuW2NoYXJdKSB7XG4gICAgICAgICAgICB0aGlzLl9sb29rdXBIZWxwZXIoXG4gICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbltjaGFyXSxcbiAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgICAgICAgICB3aWxkY2FyZE1hdGNoZXMsXG4gICAgICAgICAgICAgICAgdmlzaXRlZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZW4sIHRyeSB3aWxkY2FyZCBtYXRjaFxuICAgICAgICBpZiAoY2hhci5tYXRjaCgvXlswLTlhLXpdKyQvKSAmJiBub2RlLmNoaWxkcmVuWycqJ10pIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1dpbGRjYXJkTWF0Y2hlcyA9IHdpbGRjYXJkTWF0Y2hlcy5jb25jYXQoY2hhcik7XG4gICAgICAgICAgICB0aGlzLl9sb29rdXBIZWxwZXIoXG4gICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlblsnKiddLFxuICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgIGluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICByZXN1bHRzLFxuICAgICAgICAgICAgICAgIG5ld1dpbGRjYXJkTWF0Y2hlcyxcbiAgICAgICAgICAgICAgICB2aXNpdGVkXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgdmFsdWVzIG9mIHRlcm1zIHRoYXQgc3RhcnQgd2l0aCB0aGUgZ2l2ZW4gcXVlcnkgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBxdWVyeSAtIFRoZSBxdWVyeSBzdHJpbmcuXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCBtYXRjaGluZyB0ZXJtcy5cbiAgICAgKi9cbiAgICB0eXBlQWhlYWQocXVlcnk6IHN0cmluZyk6IFBhdHRlcm5bXSB7XG4gICAgICAgIGxldCBub2RlcyA9IFt7IG5vZGU6IHRoaXMucm9vdCwgaW5kZXg6IDAgfV07XG4gICAgICAgIGNvbnN0IHJlc3VsdHM6IFBhdHRlcm5bXSA9IFtdO1xuICAgICAgICBjb25zdCBjb2xsZWN0ZWROb2RlcyA9IG5ldyBTZXQ8VHJpZU5vZGU+KCk7XG5cbiAgICAgICAgd2hpbGUgKG5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBuZXh0Tm9kZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBub2RlLCBpbmRleCB9IG9mIG5vZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBxdWVyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29sbGVjdFZhbHVlcyhub2RlLCByZXN1bHRzLCBjb2xsZWN0ZWROb2Rlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciA9IHF1ZXJ5W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW5bY2hhcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlLmNoaWxkcmVuW2NoYXJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCArIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhci5tYXRjaCgvXlswLTlhLXpdKyQvKSAmJiBub2RlLmNoaWxkcmVuWycqJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlLmNoaWxkcmVuWycqJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4ICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZXMgPSBuZXh0Tm9kZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jb2xsZWN0VmFsdWVzKFxuICAgICAgICBzdGFydE5vZGU6IFRyaWVOb2RlLFxuICAgICAgICByZXN1bHRzOiBQYXR0ZXJuW10sXG4gICAgICAgIGNvbGxlY3RlZE5vZGVzOiBTZXQ8VHJpZU5vZGU+XG4gICAgKTogdm9pZCB7XG4gICAgICAgIGxldCBxdWV1ZSA9IFtzdGFydE5vZGVdO1xuICAgICAgICBjb25zdCB2aXNpdGVkTm9kZXMgPSBuZXcgU2V0PFRyaWVOb2RlPigpO1xuXG4gICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gcXVldWUuc2hpZnQoKSE7XG5cbiAgICAgICAgICAgIGlmICh2aXNpdGVkTm9kZXMuaGFzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aXNpdGVkTm9kZXMuYWRkKG5vZGUpO1xuXG4gICAgICAgICAgICBpZiAobm9kZS52YWx1ZSAhPT0gbnVsbCAmJiAhY29sbGVjdGVkTm9kZXMuaGFzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG5vZGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbGxlY3RlZE5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZE5vZGUgb2YgT2JqZWN0LnZhbHVlcyhub2RlLmNoaWxkcmVuKSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goY2hpbGROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgUmVnZXhNYXRjaGVyIHtcbiAgICBwcml2YXRlIHBhdHRlcm5zOiB7IHJlZ2V4OiBSZWdFeHA7IHJlcGxhY2VtZW50czogc3RyaW5nW10gfVtdO1xuXG4gICAgY29uc3RydWN0b3IocGF0dGVybnM6IFBhdHRlcm5bXSkge1xuICAgICAgICB0aGlzLnBhdHRlcm5zID0gcGF0dGVybnMubWFwKChwKSA9PiAoe1xuICAgICAgICAgICAgcmVnZXg6IG5ldyBSZWdFeHAocC5wYXR0ZXJuKSxcbiAgICAgICAgICAgIHJlcGxhY2VtZW50czogcC5yZXBsYWNlbWVudHMsXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBhZGRQYXR0ZXJuKHBhdHRlcm46IFBhdHRlcm4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgICAgIHJlZ2V4OiBuZXcgUmVnRXhwKHBhdHRlcm4ucGF0dGVybiksXG4gICAgICAgICAgICByZXBsYWNlbWVudHM6IHBhdHRlcm4ucmVwbGFjZW1lbnRzLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRTdWdnZXN0aW9ucyhpbnB1dDogc3RyaW5nKTogU3VnZ2VzdGlvblJlc3VsdCB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgZmFzdFJlcGxhY2UgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgdGhpcy5wYXR0ZXJucykge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHBhdHRlcm4ucmVnZXgpO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVwbGFjZW1lbnQgb2YgcGF0dGVybi5yZXBsYWNlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKGAkJHtpfWAsIG1hdGNoZXNbaV0gfHwgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWdnZXN0aW9ucywgZmFzdFJlcGxhY2UgfTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWdnZXN0aW9uTWF0Y2hlciB7XG4gICAgcHJpdmF0ZSB0cmllOiBUcmllO1xuICAgIHByaXZhdGUgcmVnZXhlczogUmVnZXhNYXRjaGVyO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIFN1Z2dlc3Rpb25NYXRjaGVyLlxuICAgICAqIEBwYXJhbSBwYXR0ZXJucyAtIEFycmF5IG9mIHBhdHRlcm4gb2JqZWN0cy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXR0ZXJuczogUGF0dGVybltdKSB7XG4gICAgICAgIGNvbnN0IHRyaWVUZXJtcyA9IHBhdHRlcm5zLmZsYXRNYXAoKGNvbmYpID0+IHtcbiAgICAgICAgICAgIGlmICghY29uZi50eXBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt7IHRlcm06IGNvbmYucGF0dGVybiwgdmFsdWU6IGNvbmYgfV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudHJpZSA9IG5ldyBUcmllKHRyaWVUZXJtcyk7XG5cbiAgICAgICAgY29uc3QgcmVnZXhUZXJtcyA9IHBhdHRlcm5zLmZsYXRNYXAoKGNvbmYpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25mLnR5cGUgJiYgY29uZi50eXBlID09PSAncmVnZXgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjb25mXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVnZXhlcyA9IG5ldyBSZWdleE1hdGNoZXIocmVnZXhUZXJtcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXBsYWNlUGxhY2Vob2xkZXJzKHZhbHVlOiBzdHJpbmcsIG1hdGNoZXM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcJChbMS05XVxcZCopL2csIChtYXRjaCwgaW5kZXhTdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoaW5kZXhTdHIsIDEwKSAtIDE7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBtYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzW2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0TWF0Y2hpbmdQYXR0ZXJucyhzZWFyY2hTdHJpbmc6IHN0cmluZyk6IExvb2t1cFJlc3VsdFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpZS5sb29rdXAoc2VhcmNoU3RyaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIHNlYXJjaCBzdHJpbmcgYXMgaW5wdXQgYW5kIHJldHVybnMgYSBjb21iaW5lZCBhcnJheSBvZiBhbGwgcmVwbGFjZW1lbnRzXG4gICAgICogZm9yIGFsbCBtYXRjaGVzLCB3aXRoIHRoZSBwbGFjZWhvbGRlcnMgcmVwbGFjZWQuXG4gICAgICogQHBhcmFtIHNlYXJjaFN0cmluZyAtIFRoZSBzZWFyY2ggc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIHN1Z2dlc3Rpb25zIGFycmF5IGFuZCBmYXN0UmVwbGFjZSBmbGFnLlxuICAgICAqL1xuICAgIGdldFN1Z2dlc3Rpb25zKHNlYXJjaFN0cmluZzogc3RyaW5nKTogU3VnZ2VzdGlvblJlc3VsdCB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLnRyaWUubG9va3VwKHNlYXJjaFN0cmluZyk7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgZmFzdFJlcGxhY2UgPSBmYWxzZTtcblxuICAgICAgICByZXN1bHRzLmZvckVhY2goKHsgdmFsdWU6IGNvbmYsIG1hdGNoOiB3aWxkY2FyZE1hdGNoZXMgfSkgPT4ge1xuICAgICAgICAgICAgY29uZi5yZXBsYWNlbWVudHMuZm9yRWFjaCgocmVwbGFjZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWdnZXN0aW9uID0gdGhpcy5yZXBsYWNlUGxhY2Vob2xkZXJzKFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgd2lsZGNhcmRNYXRjaGVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKHN1Z2dlc3Rpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmYXN0UmVwbGFjZSA9IGZhc3RSZXBsYWNlIHx8ICEhY29uZi5mYXN0UmVwbGFjZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcnMgPSB0aGlzLnJlZ2V4ZXMuZ2V0U3VnZ2VzdGlvbnMoc2VhcmNoU3RyaW5nKTtcbiAgICAgICAgc3VnZ2VzdGlvbnMucHVzaCguLi5ycy5zdWdnZXN0aW9ucyk7XG4gICAgICAgIGZhc3RSZXBsYWNlID0gKGZhc3RSZXBsYWNlIHx8IHJzLmZhc3RSZXBsYWNlKSAmJiBzdWdnZXN0aW9ucy5sZW5ndGggPT09IDE7XG5cbiAgICAgICAgcmV0dXJuIHsgc3VnZ2VzdGlvbnMsIGZhc3RSZXBsYWNlIH07XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgUGx1Z2luLFxufSBmcm9tICdvYnNpZGlhbic7XG5cbmltcG9ydCB7IFN1Z2dlc3Rpb25NYXRjaGVyIH0gZnJvbSBcIi4vcGF0dGVybl9tYXRjaGVyXCJcblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF0dGVybiB7XG4gICAgdHlwZT86ICdyZWdleCc7XG4gICAgcGF0dGVybjogc3RyaW5nO1xuICAgIHJlcGxhY2VtZW50czogc3RyaW5nW107XG59XG5cbmludGVyZmFjZSBNYXRoQ29uZmlnIHtcbiAgICByZW5kZXJNYXRoOiBib29sZWFuO1xuICAgIHBhdHRlcm5zOiBQYXR0ZXJuW107XG59XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHOiBNYXRoQ29uZmlnID0ge1xuICAgIHJlbmRlck1hdGg6IGZhbHNlLFxuICAgIHBhdHRlcm5zIDogW1xuICAgICAgICAvLyBMb2dpY2FsIG9wZXJhdG9yc1xuICAgICAgICB7IHBhdHRlcm46ICdvcicsIHJlcGxhY2VtZW50czogWydcXFxcbG9yJ10sIGZhc3RSZXBsYWNlOiB0cnVlIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ2FuZCcsIHJlcGxhY2VtZW50czogWydcXFxcbGFuZCddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdub3QnLCByZXBsYWNlbWVudHM6IFsnXFxcXGxub3QnXSwgZmFzdFJlcGxhY2U6IHRydWUgfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnPT4nLCByZXBsYWNlbWVudHM6IFsnXFxcXGltcGxpZXMnXSwgZmFzdFJlcGxhY2U6IHRydWUgfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnPD0+JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxpZmYnXSwgZmFzdFJlcGxhY2U6IHRydWUgfSxcblxuICAgICAgICAvLyBHcmVlayBsZXR0ZXJzXG4gICAgICAgIHsgcGF0dGVybjogJ2EnLCByZXBsYWNlbWVudHM6IFsnXFxcXGFscGhhJywgJ1xcXFxhbGVwaCddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ2InLCByZXBsYWNlbWVudHM6IFsnXFxcXGJldGEnLCAnXFxcXGJldGgnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdnJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxnYW1tYScsICdcXFxcZ2ltZWwnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdkJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxkZWx0YScsICdcXFxcZGFsZXRoJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnZScsIHJlcGxhY2VtZW50czogWydcXFxcZXBzaWxvbicsICdcXFxcdmFyZXBzaWxvbiddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ3onLCByZXBsYWNlbWVudHM6IFsnXFxcXHpldGEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdoJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxldGEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICd0JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFx0aGV0YScsICdcXFxcdmFydGhldGEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdpJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxpb3RhJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnaycsIHJlcGxhY2VtZW50czogWydcXFxca2FwcGEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdsJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxsYW1iZGEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdtJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxtdSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ24nLCByZXBsYWNlbWVudHM6IFsnXFxcXG51J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAneCcsIHJlcGxhY2VtZW50czogWydcXFxceGknXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdvJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxvbWljcm9uJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAncCcsIHJlcGxhY2VtZW50czogWydcXFxccGknLCAnXFxcXHZhcnBpJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAncicsIHJlcGxhY2VtZW50czogWydcXFxccmhvJywgJ1xcXFx2YXJyaG8nXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdzJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxzaWdtYScsICdcXFxcdmFyc2lnbWEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICd1JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFx1cHNpbG9uJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnZicsIHJlcGxhY2VtZW50czogWydcXFxccGhpJywgJ1xcXFx2YXJwaGknXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdjJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxjaGknXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICd5JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxwc2knXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICd3JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxvbWVnYSddIH0sXG5cbiAgICAgICAgLy8gVXBwZXJjYXNlIEdyZWVrIGxldHRlcnNcbiAgICAgICAgeyBwYXR0ZXJuOiAnRScsIHJlcGxhY2VtZW50czogWydcXFxcZXhpc3RzJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnRycsIHJlcGxhY2VtZW50czogWydcXFxcR2FtbWEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdEJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxEZWx0YSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ1QnLCByZXBsYWNlbWVudHM6IFsnXFxcXFRoZXRhJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnSScsIHJlcGxhY2VtZW50czogWydcXFxcSW90YSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ0wnLCByZXBsYWNlbWVudHM6IFsnXFxcXExhbWJkYSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ1gnLCByZXBsYWNlbWVudHM6IFsnXFxcXFhpJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnUCcsIHJlcGxhY2VtZW50czogWydcXFxcUGknXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdTJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxTaWdtYSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ1UnLCByZXBsYWNlbWVudHM6IFsnXFxcXFVwc2lsb24nXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdGJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxQaGknLCAnXFxcXGZvcmFsbCddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ1knLCByZXBsYWNlbWVudHM6IFsnXFxcXFBzaSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ1cnLCByZXBsYWNlbWVudHM6IFsnXFxcXE9tZWdhJ10gfSxcblxuICAgICAgICAvLyBQYXJlbnRoZXNlcyBhbmQgYnJhY2tldHNcbiAgICAgICAgeyBwYXR0ZXJuOiAnKCcsIHJlcGxhY2VtZW50czogWydcXFxcYmlnKCcsICdcXFxcQmlnKCcsICdcXFxcYmlnZygnLCAnXFxcXEJpZ2coJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnKScsIHJlcGxhY2VtZW50czogWydcXFxcYmlnKScsICdcXFxcQmlnKScsICdcXFxcYmlnZyknLCAnXFxcXEJpZ2cpJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnWycsIHJlcGxhY2VtZW50czogWydcXFxcYmlnWycsICdcXFxcQmlnWycsICdcXFxcYmlnZ1snLCAnXFxcXEJpZ2dbJywgJ1xcXFxsY2VpbCcsICdcXFxcbGZsb29yJywgJ1xcXFx1bGNvcm5lcicsICdcXFxcbGxjb3JuZXInXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICddJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxiaWddJywgJ1xcXFxCaWddJywgJ1xcXFxiaWdnXScsICdcXFxcQmlnZ10nLCAnXFxcXHJjZWlsJywgJ1xcXFxyZmxvb3InLCAnXFxcXHVyY29ybmVyJywgJ1xcXFxscmNvcm5lciddIH0sXG5cbiAgICAgICAgLy8gQXJyb3dzXG4gICAgICAgIHsgcGF0dGVybjogJy0+JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxyaWdodGFycm93JywgJ1xcXFx0byddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJzwtJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxsZWZ0YXJyb3cnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICc8LT4nLCByZXBsYWNlbWVudHM6IFsnXFxcXGxlZnRyaWdodGFycm93J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnPT4nLCByZXBsYWNlbWVudHM6IFsnXFxcXGltcGxpZXMnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICc8PScsIHJlcGxhY2VtZW50czogWydcXFxcbGVxJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnPj0nLCByZXBsYWNlbWVudHM6IFsnXFxcXGdlcSddIH0sXG5cbiAgICAgICAgLy8gTWF0aGVtYXRpY2FsIG9wZXJhdG9yc1xuICAgICAgICB7IHBhdHRlcm46ICcrJywgcmVwbGFjZW1lbnRzOiBbJysnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICctJywgcmVwbGFjZW1lbnRzOiBbJy0nXSB9LFxuICAgICAgICAvL3sgcGF0dGVybjogJyonLCByZXBsYWNlbWVudHM6IFsnXFxcXHRpbWVzJywgJ1xcXFxhc3QnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICcvJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxkaXYnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdzdW0nLCByZXBsYWNlbWVudHM6IFsnXFxcXHN1bSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ2ludCcsIHJlcGxhY2VtZW50czogWydcXFxcaW50J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnbGltJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxsaW0nXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdpbmYnLCByZXBsYWNlbWVudHM6IFsnXFxcXGluZnR5J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnc3FydCcsIHJlcGxhY2VtZW50czogWydcXFxcc3FydCddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ3Byb2QnLCByZXBsYWNlbWVudHM6IFsnXFxcXHByb2QnXSB9LFxuXG4gICAgICAgIC8vIFJlbGF0aW9uYWwgb3BlcmF0b3JzXG4gICAgICAgIHsgcGF0dGVybjogJz0nLCByZXBsYWNlbWVudHM6IFsnPSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJyE9JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxuZXEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICd+PScsIHJlcGxhY2VtZW50czogWydcXFxcYXBwcm94J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnfn4nLCByZXBsYWNlbWVudHM6IFsnXFxcXHNpbSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJzw8JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxsbCddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJz4+JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxnZyddIH0sXG5cbiAgICAgICAgLy8gU2V0IHN5bWJvbHNcbiAgICAgICAgeyBwYXR0ZXJuOiAnaW4nLCByZXBsYWNlbWVudHM6IFsnXFxcXGluJ10sIGZhc3RSZXBsYWNlOiB0cnVlIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ25pJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxuaSddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdzdWJzZXQnLCByZXBsYWNlbWVudHM6IFsnXFxcXHN1YnNldCcsICdcXFxcc3Vic2V0ZXEnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdzdXBzZXQnLCByZXBsYWNlbWVudHM6IFsnXFxcXHN1cHNldCcsICdcXFxcc3Vwc2V0ZXEnXX0sXG4gICAgICAgIHsgcGF0dGVybjogJ2VtcHR5JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxlbXB0eXNldCddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuXG4gICAgICAgIC8vIE1pc2NlbGxhbmVvdXMgc3ltYm9sc1xuICAgICAgICB7IHBhdHRlcm46ICcuLi4nLCByZXBsYWNlbWVudHM6IFsnXFxcXGxkb3RzJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnXHUwMEIwJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxkZWdyZWUnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdcdTAwQTMnLCByZXBsYWNlbWVudHM6IFsnXFxcXHBvdW5kcyddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJyQnLCByZXBsYWNlbWVudHM6IFsnXFxcXCQnXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICclJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFwlJ10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnJicsIHJlcGxhY2VtZW50czogWydcXFxcJiddIH0sXG5cbiAgICAgICAgLy8gQWNjZW50c1xuICAgICAgICB7IHBhdHRlcm46ICdoYXQnLCByZXBsYWNlbWVudHM6IFsnXFxcXGhhdHt9J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnYmFyJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxiYXJ7fSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ3RpbGRlJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFx0aWxkZXt9J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAndmVjJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFx2ZWN7fSddIH0sXG5cbiAgICAgICAgLy8gQ29tbW9uIGZ1bmN0aW9uc1xuICAgICAgICB7IHBhdHRlcm46ICdzaW4nLCByZXBsYWNlbWVudHM6IFsnXFxcXHNpbiddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdjb3MnLCByZXBsYWNlbWVudHM6IFsnXFxcXGNvcyddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuICAgICAgICB7IHBhdHRlcm46ICd0YW4nLCByZXBsYWNlbWVudHM6IFsnXFxcXHRhbiddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdsb2cnLCByZXBsYWNlbWVudHM6IFsnXFxcXGxvZyddLCBmYXN0UmVwbGFjZTogdHJ1ZSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdsbicsIHJlcGxhY2VtZW50czogWydcXFxcbG4nXSwgZmFzdFJlcGxhY2U6IHRydWUgfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAnZXhwJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxleHAnXSwgZmFzdFJlcGxhY2U6IHRydWUgfSxcblxuICAgICAgICAvLyBGcmFjdGlvbnMgYW5kIGJpbm9taWFsc1xuICAgICAgICB7IHBhdHRlcm46ICdmcmFjJywgcmVwbGFjZW1lbnRzOiBbJ1Q6XFxcXGZyYWN7JDF9eyQyfSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ2Jpbm9tJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxiaW5vbXt9e30nXSB9LFxuXG4gICAgICAgIC8vIE92ZXIgYW5kIHVuZGVyIHN5bWJvbHNcbiAgICAgICAgeyB0eXBlOiAncmVnZXgnLCBwYXR0ZXJuOiAnKC4qKV9vdmVyJCcsIHJlcGxhY2VtZW50czogWydcXFxcb3ZlcmxpbmV7JDF9J10gfSxcbiAgICAgICAgeyBwYXR0ZXJuOiAndW5kZXJsaW5lJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFx1bmRlcmxpbmV7fSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ292ZXJzZXQnLCByZXBsYWNlbWVudHM6IFsnXFxcXG92ZXJzZXR7fXt9fSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ3VuZGVyc2V0JywgcmVwbGFjZW1lbnRzOiBbJ1xcXFx1bmRlcnNldHt9e319J10gfSxcblxuICAgICAgICAvLyBMb2dpY2FsIHF1YW50aWZpZXJzXG4gICAgICAgIHsgcGF0dGVybjogJ2ZvcmFsbCcsIHJlcGxhY2VtZW50czogWydcXFxcZm9yYWxsJ10sIGZhc3RSZXBsYWNlOiB0cnVlIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ2V4aXN0cycsIHJlcGxhY2VtZW50czogWydcXFxcZXhpc3RzJ10sIGZhc3RSZXBsYWNlOiB0cnVlIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ25leGlzdHMnLCByZXBsYWNlbWVudHM6IFsnXFxcXG5leGlzdHMnXSwgZmFzdFJlcGxhY2U6IHRydWUgfSxcblxuICAgICAgICAvLyBNaXNjZWxsYW5lb3VzXG4gICAgICAgIHsgcGF0dGVybjogJ2FsZXBoJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxhbGVwaCddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ2hiYXInLCByZXBsYWNlbWVudHM6IFsnXFxcXGhiYXInXSB9LFxuICAgICAgICB7IHBhdHRlcm46ICdlbGwnLCByZXBsYWNlbWVudHM6IFsnXFxcXGVsbCddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ1JlJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxSZSddIH0sXG4gICAgICAgIHsgcGF0dGVybjogJ0ltJywgcmVwbGFjZW1lbnRzOiBbJ1xcXFxJbSddIH0sXG4gICAgXVxufTtcblxuZXhwb3J0IGNsYXNzIENvbmZpZ01hbmFnZXIge1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzYXZlQ29uZmlnKGNvbmZpZzogQ29uZmlnKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVEYXRhKHRoaXMuY29uZmlnKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkQ29uZmlnKCkge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHLCBhd2FpdCB0aGlzLnBsdWdpbi5sb2FkRGF0YSgpKTtcbiAgICAgICAgdGhpcy5tYXRjaGVyID0gbmV3IFN1Z2dlc3Rpb25NYXRjaGVyKHRoaXMuY29uZmlnLnBhdHRlcm5zKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVDb25maWcobmV3Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gbmV3Q29uZmlnO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVDb25maWcodGhpcy5jb25maWcpO1xuICAgICAgICB0aGlzLm1hdGNoZXIgPSBuZXcgU3VnZ2VzdGlvbk1hdGNoZXIodGhpcy5jb25maWcucGF0dGVybnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlc2V0Q29uZmlnKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUNvbmZpZyhERUZBVUxUX0NPTkZJRyk7XG4gICAgfVxuXG5cbn1cbiIsICIvL2ltcG9ydCB7IFRlbXBsYXRlRm9ybSB9IGZyb20gXCIuL3RlbXBsYXRlX2Zvcm1cIjtcblxuaW1wb3J0IHtcbiAgICBNYXJrZG93blJlbmRlcmVyLFxuICAgIE1hcmtkb3duVmlldyxcbn0gZnJvbSAnb2JzaWRpYW4nO1xuXG5jb25zdCBURU1QTEFURV9QUkVGSVggPSBcIlQ6XCI7XG5cbi8vIEludGVyZmFjZSBmb3IgdGhlIGlucHV0IGhhbmRsZXJcbmludGVyZmFjZSBJbnB1dEhhbmRsZXIge1xuICAgIHJlcGxhY2VDdXJzb3JUZXh0OiAodGV4dDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgU3VnZ2VzdGlvblBvcHVwIHtcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByaXZhdGUgaXNWaXNpYmxlOiBib29sZWFuO1xuICAgIHByaXZhdGUgY3VycmVudE1hdGNoOiBzdHJpbmcgfCBudWxsO1xuICAgIHByaXZhdGUgY3VycmVudFJlcGxhY2VtZW50czogc3RyaW5nW10gfCBudWxsO1xuICAgIHByaXZhdGUgZmFzdFJlcGxhY2U6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzZWxlY3RlZEluZGV4OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBpbnB1dEhhbmRsZXI6IElucHV0SGFuZGxlciB8IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KCk7XG4gICAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5mYXN0UmVwbGFjZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5pbnB1dEhhbmRsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuXG4gICAgICAgIC8vIEJpbmQgbWV0aG9kcyB0aGF0IGFyZSB1c2VkIGFzIGV2ZW50IGhhbmRsZXJzXG4gICAgICAgIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayA9IHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUtleURvd24gPSB0aGlzLmhhbmRsZUtleURvd24uYmluZCh0aGlzKTtcblxuICAgICAgICAvLyBBZGQgZ2xvYmFsIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRWxlbWVudCgpOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgICAgIGNvbnN0IHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHBvcHVwLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgICAgcGFkZGluZzogMnB4O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsMCwwLDAuMik7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIHotaW5kZXg6IDEwMDAwO1xuICAgICAgICBgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwKTtcbiAgICAgICAgcmV0dXJuIHBvcHVwO1xuICAgIH1cblxuICAgIHNob3coeDogbnVtYmVyLCB5OiBudW1iZXIsIG1hdGNoOiBzdHJpbmcsIHJlcGxhY2VtZW50czogc3RyaW5nW10sIGlucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyLCBmYXN0UmVwbGFjZSA9IGZhbHNlLCB2aWV3OiBNYXJrZG93blZpZXcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzID0gcmVwbGFjZW1lbnRzO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5pbnB1dEhhbmRsZXIgPSBpbnB1dEhhbmRsZXI7XG4gICAgICAgIHRoaXMuZmFzdFJlcGxhY2UgPSBmYXN0UmVwbGFjZSAmJiByZXBsYWNlbWVudHMubGVuZ3RoID09PSAxO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUubGVmdCA9IGAke3ggKyA1fXB4YDtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmJvdHRvbSA9IGAke3dpbmRvdy5pbm5lckhlaWdodCAtIHl9cHhgO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudG9wID0gJ2F1dG8nO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcblxuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnQodmlldyk7XG4gICAgfVxuXG4gICAgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUNvbnRlbnQodmlldzogTWFya2Rvd25WaWV3KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50TWF0Y2ggfHwgIXRoaXMuY3VycmVudFJlcGxhY2VtZW50cykgcmV0dXJuO1xuICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGNvbnN0IHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgLy8gRGVmaW5lIHRoZSBDU1MgcnVsZVxuICAgICAgICBjb25zdCBjc3NSdWxlID0gYFxuICAgICAgICAgIHAge1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICB9XG4gICAgICAgIGA7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBDU1MgcnVsZSB0byB0aGUgc3R5bGUgZWxlbWVudFxuICAgICAgICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBjc3NSdWxlO1xuXG4gICAgICAgIC8vIEluc2VydCB0aGUgc3R5bGUgZWxlbWVudCBhcyB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIGRpdlxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRSZXBsYWNlbWVudHMuZm9yRWFjaCgob3B0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXBwbGllZFJlcGxhY2VtZW50ID0gb3B0aW9uLnN0YXJ0c1dpdGgoVEVNUExBVEVfUFJFRklYKVxuICAgICAgICAgICAgICAgID8gb3B0aW9uLnNsaWNlKFRFTVBMQVRFX1BSRUZJWC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgOiBvcHRpb247XG5cbiAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBzcGFuLmlkID0gYHN1Z2dlc3Rpb24tJHtpbmRleH1gO1xuICAgICAgICAgICAgc3Bhbi5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICAgICAgYDtcblxuICAgICAgICAgICAgc3Bhbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSB0aGlzLnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kID0gJ3ZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNwYW4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSB0aGlzLnNlbGVjdGVkSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kID0gJ3ZhcigtLWJhY2tncm91bmQtcHJpbWFyeSknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0U3VnZ2VzdGlvbihpbmRleCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGluZGljYXRvciBzcGFuXG4gICAgICAgICAgICBjb25zdCBpbmRpY2F0b3JTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZmFzdFJlcGxhY2UgJiYgdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGluZGljYXRvclNwYW4uc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMyMmM1NWU7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMnB4O1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuNmVtO1xuICAgICAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yU3Bhbi50ZXh0Q29udGVudCA9ICdcdTI2QTEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3JTcGFuLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC43ZW07XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjODg4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDJweDtcbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgIGluZGljYXRvclNwYW4udGV4dENvbnRlbnQgPSBgJHtpbmRleCArIDF9LmA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBtYXRoIGNvbnRlbnQgc3BhblxuICAgICAgICAgICAgY29uc3QgbWF0aFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgICAgIHNwYW4uYXBwZW5kQ2hpbGQoaW5kaWNhdG9yU3Bhbik7XG4gICAgICAgICAgICBzcGFuLmFwcGVuZENoaWxkKG1hdGhTcGFuKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChzcGFuKTtcbiAgICAgICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oXG4gICAgICAgICAgICAgICAgYCQke2FwcGxpZWRSZXBsYWNlbWVudH0kYCxcbiAgICAgICAgICAgICAgICBtYXRoU3BhbixcbiAgICAgICAgICAgICAgICB2aWV3LmZpbGUucGF0aCxcbiAgICAgICAgICAgICAgICB2aWV3XG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUeXBlU2NyaXB0IGRvZXNuJ3Qga25vdyBhYm91dCBNYXRoSmF4IGJ5IGRlZmF1bHQsIHNvIHdlIG5lZWQgdG8gZGVjbGFyZSBpdFxuICAgICAgICAvLyh3aW5kb3cgYXMgYW55KS5NYXRoSmF4LnR5cGVzZXRQcm9taXNlKFt0aGlzLmVsZW1lbnRdKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVNlbGVjdGVkU3VnZ2VzdGlvbigpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbDxIVE1MU3BhbkVsZW1lbnQ+KCdzcGFuW2lkXj1cInN1Z2dlc3Rpb24tXCJdJyk7XG4gICAgICAgIHN1Z2dlc3Rpb25zLmZvckVhY2goc3BhbiA9PiB7XG4gICAgICAgICAgICBzcGFuLnN0eWxlLmJhY2tncm91bmQgPSAndmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KSc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRTcGFuID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTFNwYW5FbGVtZW50PihgI3N1Z2dlc3Rpb24tJHt0aGlzLnNlbGVjdGVkSW5kZXh9YCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRTcGFuKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTcGFuLnN0eWxlLmJhY2tncm91bmQgPSAndmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnkpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2VsZWN0U3VnZ2VzdGlvbihpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzIHx8ICF0aGlzLnZpZXcpIHJldHVybjtcblxuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuY3VycmVudFJlcGxhY2VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudC5zdGFydHNXaXRoKFRFTVBMQVRFX1BSRUZJWCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtID0gbmV3IFRlbXBsYXRlRm9ybShyZXBsYWNlbWVudC5zbGljZShURU1QTEFURV9QUkVGSVgubGVuZ3RoKSwgdGhpcy5pbnB1dEhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIGZvcm0uc2hvdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMudmlldy5lZGl0b3Iub2Zmc2V0VG9Qb3MoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5lZGl0b3IucG9zVG9PZmZzZXQodGhpcy52aWV3LmVkaXRvci5nZXRDdXJzb3IoKSkgLSB0aGlzLmN1cnJlbnRNYXRjaC5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5lZGl0b3IucmVwbGFjZVJhbmdlKHJlcGxhY2VtZW50LCBzdGFydCwgdGhpcy52aWV3LmVkaXRvci5nZXRDdXJzb3IoKSk7XG4gICAgICAgICAgICAgICAgLy90aGlzLmlucHV0SGFuZGxlci5yZXBsYWNlQ3Vyc29yVGV4dChyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUgfHwgIXRoaXMuY3VycmVudFJlcGxhY2VtZW50cykgcmV0dXJuO1xuXG4gICAgICAgIC8vIEhhbmRsZSBmYXN0IHJlcGxhY2UgZm9yIG5vbi1hbHBoYW51bWVyaWMga2V5c1xuICAgICAgICBpZiAodGhpcy5mYXN0UmVwbGFjZSAmJlxuICAgICAgICAgICAgIS9eW2EtekEtWjAtOV0kLy50ZXN0KGUua2V5KSAmJlxuICAgICAgICAgICAgIVsnRXNjYXBlJywgJ1RhYicsICdCYWNrc3BhY2UnXS5pbmNsdWRlcyhlLmtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0U3VnZ2VzdGlvbigwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEluZGV4IDwgdGhpcy5jdXJyZW50UmVwbGFjZW1lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZFN1Z2dlc3Rpb24oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0U3VnZ2VzdGlvbih0aGlzLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXkgPj0gJzEnICYmIGUua2V5IDw9ICc5Jykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGUua2V5KSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHRoaXMuY3VycmVudFJlcGxhY2VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0U3VnZ2VzdGlvbihpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZURvY3VtZW50Q2xpY2soZTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUgJiYgIXRoaXMuZWxlbWVudC5jb250YWlucyhlLnRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24pO1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwgImltcG9ydCB7IENvbmZpZ01hbmFnZXIsIE1hdGhDb25maWcsIFBhdHRlcm4gfSBmcm9tIFwiLi9jb25maWdcIlxuXG5leHBvcnQgY2xhc3MgTWF0Y2hGb3JtIHtcbiAgICBwcml2YXRlIGNvbmZpZ01hbmFnZXI6IENvbmZpZ01hbmFnZXI7XG4gICAgcHJpdmF0ZSBjb25maWc6IE1hdGhDb25maWc7XG4gICAgcHJpdmF0ZSBtYXRjaERhdGE6IFBhdHRlcm5Db25maWcgfCBudWxsO1xuICAgIHByaXZhdGUgZWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWdNYW5hZ2VyOiBDb25maWdNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuY29uZmlnTWFuYWdlciA9IGNvbmZpZ01hbmFnZXI7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRWxlbWVudCgpOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZm9ybS5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogMCAycHggMTBweCByZ2JhKDAsMCwwLDAuMik7XG4gICAgICAgICAgICB6LWluZGV4OiAxMDAwMztcbiAgICAgICAgICAgIG1heC13aWR0aDogODAlO1xuICAgICAgICAgICAgbWF4LWhlaWdodDogODAlO1xuICAgICAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIGA7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgICAgICByZXR1cm4gZm9ybTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUNvbnRlbnQoKSB7XG4gICAgICAgIC8vIENyZWF0ZSBmYXN0IHJlcGxhY2UgdG9nZ2xlIHNlY3Rpb25cbiAgICAgICAgY29uc3QgZmFzdFJlcGxhY2VIdG1sID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZhc3QtcmVwbGFjZS1zZWN0aW9uXCIgc3R5bGU9XCJtYXJnaW4tdG9wOiAxNXB4OyBtYXJnaW4tYm90dG9tOiAxNXB4O1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogOHB4O1wiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJmYXN0UmVwbGFjZVwiICR7dGhpcy5tYXRjaERhdGE/LmZhc3RSZXBsYWNlID8gJ2NoZWNrZWQnIDogJyd9PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBGYXN0IFJlcGxhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiY29sb3I6ICMyMmM1NWU7IG1hcmdpbi1sZWZ0OiA0cHg7XCI+XHUyNkExPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZm9udC1zaXplOiAwLjhlbTsgY29sb3I6ICM2NjY7IG1hcmdpbi10b3A6IDRweDtcIj5cbiAgICAgICAgICAgICAgICAgICAgRW5hYmxlcyBxdWljayByZXBsYWNlbWVudCB3aXRoIGFueSBub24tYWxwaGFudW1lcmljIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxoMj4ke3RoaXMubWF0Y2hEYXRhID8gJ0VkaXQgUGF0dGVybicgOiAnQ3JlYXRlIE5ldyBQYXR0ZXJuJ308L2gyPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cInBhdHRlcm5cIj5QYXR0ZXJuIChyZWdleCk6PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPVwicGF0dGVyblwiIHZhbHVlPVwiJHt0aGlzLm1hdGNoRGF0YSA/IHRoaXMubWF0Y2hEYXRhLnBhdHRlcm4gOiAnJ31cIj48YnI+PGJyPlxuICAgICAgICAgICAgJHtmYXN0UmVwbGFjZUh0bWx9XG4gICAgICAgICAgICA8ZGl2IGlkPVwicmVwbGFjZW1lbnRzXCI+PC9kaXY+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwiYWRkUmVwbGFjZW1lbnRcIj5BZGQgUmVwbGFjZW1lbnQ8L2J1dHRvbj48YnI+PGJyPlxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cInNhdmVNYXRjaFwiPlNhdmU8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gaWQ9XCJjYW5jZWxNYXRjaFwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICBgO1xuICAgICAgICBpZiAodGhpcy5tYXRjaERhdGEpIHtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hEYXRhLnJlcGxhY2VtZW50cy5mb3JFYWNoKHJlcGxhY2VtZW50ID0+IHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVwbGFjZW1lbnQgaXMgYSB0ZW1wbGF0ZVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzVGVtcGxhdGUgPSByZXBsYWNlbWVudC5zdGFydHNXaXRoKCdUOicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdHVhbFJlcGxhY2VtZW50ID0gaXNUZW1wbGF0ZSA/IHJlcGxhY2VtZW50LnNsaWNlKDIpIDogcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRSZXBsYWNlbWVudEZpZWxkKGFjdHVhbFJlcGxhY2VtZW50LCBpc1RlbXBsYXRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRSZXBsYWNlbWVudEZpZWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRhY2hFdmVudExpc3RlbmVycygpO1xuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdHRhY2hFdmVudExpc3RlbmVycygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWRkUmVwbGFjZW1lbnRCdXR0b24gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignI2FkZFJlcGxhY2VtZW50Jyk7XG4gICAgICAgIGNvbnN0IHNhdmVNYXRjaEJ1dHRvbiA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjc2F2ZU1hdGNoJyk7XG4gICAgICAgIGNvbnN0IGNhbmNlbE1hdGNoQnV0dG9uID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYW5jZWxNYXRjaCcpO1xuXG4gICAgICAgIGlmIChhZGRSZXBsYWNlbWVudEJ1dHRvbiAmJiBzYXZlTWF0Y2hCdXR0b24gJiYgY2FuY2VsTWF0Y2hCdXR0b24pIHtcbiAgICAgICAgICAgIGFkZFJlcGxhY2VtZW50QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUmVwbGFjZW1lbnRGaWVsZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmFzdFJlcGxhY2VTdGF0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzYXZlTWF0Y2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnNhdmVNYXRjaCgpKTtcbiAgICAgICAgICAgIGNhbmNlbE1hdGNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5oaWRlKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVGYXN0UmVwbGFjZVN0YXRlKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBmYXN0UmVwbGFjZUNoZWNrYm94ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmYXN0UmVwbGFjZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VtZW50cyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcmVwbGFjZW1lbnRzIGZpZWxkc2V0Jyk7XG5cbiAgICAgICAgaWYgKGZhc3RSZXBsYWNlQ2hlY2tib3gpIHtcbiAgICAgICAgICAgIC8vIERpc2FibGUgZmFzdCByZXBsYWNlIGlmIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZSByZXBsYWNlbWVudFxuICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZmFzdFJlcGxhY2VDaGVja2JveC5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZmFzdFJlcGxhY2VDaGVja2JveC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZmFzdFJlcGxhY2VDaGVja2JveC50aXRsZSA9ICdGYXN0IHJlcGxhY2UgaXMgb25seSBhdmFpbGFibGUgZm9yIHBhdHRlcm5zIHdpdGggYSBzaW5nbGUgcmVwbGFjZW1lbnQnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYXN0UmVwbGFjZUNoZWNrYm94LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZmFzdFJlcGxhY2VDaGVja2JveC50aXRsZSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRSZXBsYWNlbWVudEZpZWxkKHJlcGxhY2VtZW50OiBzdHJpbmcgPSAnJywgaXNUZW1wbGF0ZTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHJlcGxhY2VtZW50c0RpdiA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjcmVwbGFjZW1lbnRzJyk7XG4gICAgICAgIGlmICghcmVwbGFjZW1lbnRzRGl2KSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZmllbGRTZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWVsZHNldCcpO1xuICAgICAgICBmaWVsZFNldC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICBgO1xuXG4gICAgICAgIGZpZWxkU2V0LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyBnYXA6IDEwcHg7XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImZsZXgtZ3JvdzogMTtcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInJlcGxhY2VtZW50XCI+UmVwbGFjZW1lbnQ6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJyZXBsYWNlbWVudFwiIHZhbHVlPVwiJHtyZXBsYWNlbWVudH1cIiBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogNHB4O1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwidGVtcGxhdGUtY2hlY2tib3hcIiAke2lzVGVtcGxhdGUgPyAnY2hlY2tlZCcgOiAnJ30+XG4gICAgICAgICAgICAgICAgICAgICAgICBUZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJyZW1vdmVSZXBsYWNlbWVudFwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IGF1dG87XCI+UmVtb3ZlPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcblxuICAgICAgICBjb25zdCByZW1vdmVCdXR0b24gPSBmaWVsZFNldC5xdWVyeVNlbGVjdG9yKCcucmVtb3ZlUmVwbGFjZW1lbnQnKTtcbiAgICAgICAgaWYgKHJlbW92ZUJ1dHRvbikge1xuICAgICAgICAgICAgcmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZpZWxkU2V0LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmFzdFJlcGxhY2VTdGF0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwbGFjZW1lbnRzRGl2LmFwcGVuZENoaWxkKGZpZWxkU2V0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhdmVNYXRjaCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGF0dGVybklucHV0ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYXR0ZXJuJykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgY29uc3QgZmFzdFJlcGxhY2VDaGVja2JveCA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjZmFzdFJlcGxhY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICBjb25zdCByZXBsYWNlbWVudEZpZWxkc2V0cyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcmVwbGFjZW1lbnRzIGZpZWxkc2V0Jyk7XG5cbiAgICAgICAgaWYgKCFwYXR0ZXJuSW5wdXQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwYXR0ZXJuID0gcGF0dGVybklucHV0LnZhbHVlO1xuICAgICAgICBjb25zdCByZXBsYWNlbWVudHMgPSBBcnJheS5mcm9tKHJlcGxhY2VtZW50RmllbGRzZXRzKS5tYXAoZmllbGRzZXQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnRJbnB1dCA9IGZpZWxkc2V0LnF1ZXJ5U2VsZWN0b3IoJy5yZXBsYWNlbWVudCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZUNoZWNrYm94ID0gZmllbGRzZXQucXVlcnlTZWxlY3RvcignLnRlbXBsYXRlLWNoZWNrYm94JykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50VmFsdWUgPSByZXBsYWNlbWVudElucHV0Py52YWx1ZSB8fCAnJztcbiAgICAgICAgICAgIGNvbnN0IGlzVGVtcGxhdGUgPSB0ZW1wbGF0ZUNoZWNrYm94Py5jaGVja2VkIHx8IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGlzVGVtcGxhdGUgPyBgVDoke3JlcGxhY2VtZW50VmFsdWV9YCA6IHJlcGxhY2VtZW50VmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmYXN0UmVwbGFjZSA9IGZhc3RSZXBsYWNlQ2hlY2tib3g/LmNoZWNrZWQgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMubWF0Y2hEYXRhKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgb2xkIHBhdHRlcm5cbiAgICAgICAgICAgIGNvbnN0IG9sZFBhdHRlcm5JbmRleCA9IHRoaXMuY29uZmlnLnBhdHRlcm5zLmZpbmRJbmRleChwID0+XG4gICAgICAgICAgICAgICAgcC5wYXR0ZXJuID09PSB0aGlzLm1hdGNoRGF0YS5wYXR0ZXJuXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKG9sZFBhdHRlcm5JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5wYXR0ZXJucy5zcGxpY2Uob2xkUGF0dGVybkluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBuZXcgcGF0dGVyblxuICAgICAgICB0aGlzLmNvbmZpZy5wYXR0ZXJucy5wdXNoKHtcbiAgICAgICAgICAgIHBhdHRlcm4sXG4gICAgICAgICAgICByZXBsYWNlbWVudHMsXG4gICAgICAgICAgICBmYXN0UmVwbGFjZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBTYXZlIGNvbmZpZ1xuICAgICAgICB0aGlzLmNvbmZpZ01hbmFnZXIudXBkYXRlQ29uZmlnKHRoaXMuY29uZmlnKTtcblxuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvdyhtYXRjaERhdGE6IFBhdHRlcm4gfCBudWxsID0gbnVsbCk6IHZvaWQge1xuICAgICAgICB0aGlzLm1hdGNoRGF0YSA9IG1hdGNoRGF0YTtcbiAgICAgICAgdGhpcy51cGRhdGVDb250ZW50KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICB9XG59XG4iLCAiaW1wb3J0IHtDb25maWdNYW5hZ2VyLCBQYXR0ZXJufSBmcm9tIFwiLi9jb25maWdcIlxuaW1wb3J0IHsgTWF0Y2hGb3JtIH0gZnJvbSBcIi4vbWF0Y2hfZm9ybVwiXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbidcblxuXG5leHBvcnQgY2xhc3MgQ29uZmlnRGlhbG9nIGV4dGVuZHMgQ29tcG9uZW50e1xuICAgIHByaXZhdGUgZWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjb25maWdNYW5hZ2VyOiBDb25maWdNYW5hZ2VyO1xuICAgIHByaXZhdGUgbWF0Y2hGb3JtOiBNYXRjaEZvcm07XG4gICAgcHJpdmF0ZSBjb25maWc6IGFueTtcbiAgICBwcml2YXRlIGlzVmlzaWJsZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ01hbmFnZXI6IENvbmZpZ01hbmFnZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gY29uZmlnTWFuYWdlcjtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWdNYW5hZ2VyLmNvbmZpZztcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvbmxvYWQoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpO1xuICAgICAgICB0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2sgPSB0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5tYXRjaEZvcm0gPSBuZXcgTWF0Y2hGb3JtKHRoaXMuY29uZmlnTWFuYWdlcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVFbGVtZW50KCk6IEhUTUxEaXZFbGVtZW50IHtcbiAgICAgICAgY29uc3QgZGlhbG9nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpYWxvZy5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyLWZvY3VzKTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCAxMHB4IHJnYmEoMCwwLDAsMC4yKTtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB6LWluZGV4OiAxMDAwMjtcbiAgICAgICAgICAgIG1heC13aWR0aDogODAlO1xuICAgICAgICAgICAgbWF4LWhlaWdodDogODAlO1xuICAgICAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgICBgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpYWxvZyk7XG4gICAgICAgIHJldHVybiBkaWFsb2c7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVFZGl0QnV0dG9uKGNvbmY6IFBhdHRlcm4pOiBIVE1MQnV0dG9uRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gJ1x1MjcwRlx1RkUwRic7IC8vIEVkaXQgaWNvblxuICAgICAgICBidXR0b24uc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMnB4IDZweDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgIGA7XG4gICAgICAgIGJ1dHRvbi50aXRsZSA9ICdFZGl0IHBhdHRlcm4nO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJEb21FdmVudChidXR0b24sJ2NsaWNrJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgZGlhbG9nIGZyb20gY2xvc2luZ1xuICAgICAgICAgICAgdGhpcy5tYXRjaEZvcm0uc2hvdyhjb25mKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KHNlbGVjdGVkVGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuICAgICAgICB0aXRsZS5pbm5lckhUTUwgPSBgTWF0Y2hpbmcgUGF0dGVybnMgZm9yIDxjb2RlPiR7c2VsZWN0ZWRUZXh0fTwvY29kZT5gO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgICAgIGNvbnN0IG1hdGNoZXMgPSB0aGlzLmNvbmZpZ01hbmFnZXIubWF0Y2hlci5nZXRNYXRjaGluZ1BhdHRlcm5zKHNlbGVjdGVkVGV4dCk7XG4gICAgICAgIGZvciAoY29uc3QgeyB2YWx1ZSwgd2lsZGNhcmRNYXRjaGVzIH0gb2YgbWF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgeyBwYXR0ZXJuLCByZXBsYWNlbWVudHMsIGZhc3RSZXBsYWNlIH0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHBhdHRlcm5EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIHBhdHRlcm4gaGVhZGVyIHdpdGggZWRpdCBidXR0b25cbiAgICAgICAgICAgIGNvbnN0IHBhdHRlcm5IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICAgICAgICAgICAgcGF0dGVybkhlYWRlci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgcGF0dGVybkhlYWRlci5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBmYXN0IHJlcGxhY2UgaW5kaWNhdG9yIGlmIGVuYWJsZWRcbiAgICAgICAgICAgIGlmIChmYXN0UmVwbGFjZSAmJiByZXBsYWNlbWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmFzdFJlcGxhY2VJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgIGZhc3RSZXBsYWNlSWNvbi5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzIyYzU1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICBmYXN0UmVwbGFjZUljb24udGl0bGUgPSAnRmFzdCBSZXBsYWNlIEVuYWJsZWQnO1xuICAgICAgICAgICAgICAgIGZhc3RSZXBsYWNlSWNvbi50ZXh0Q29udGVudCA9ICdcdTI2QTEnO1xuICAgICAgICAgICAgICAgIHBhdHRlcm5IZWFkZXIuYXBwZW5kQ2hpbGQoZmFzdFJlcGxhY2VJY29uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGF0dGVyblRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBwYXR0ZXJuVGV4dC5pbm5lckhUTUwgPSBgUGF0dGVybjogPGNvZGU+JHtwYXR0ZXJufTwvY29kZT5gO1xuICAgICAgICAgICAgcGF0dGVybkhlYWRlci5hcHBlbmRDaGlsZChwYXR0ZXJuVGV4dCk7XG4gICAgICAgICAgICBwYXR0ZXJuSGVhZGVyLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlRWRpdEJ1dHRvbih2YWx1ZSkpO1xuXG4gICAgICAgICAgICBwYXR0ZXJuRGl2LmFwcGVuZENoaWxkKHBhdHRlcm5IZWFkZXIpO1xuXG4gICAgICAgICAgICAvLyBBZGQgcmVwbGFjZW1lbnRzIGxpc3RcbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50c0xpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgICAgICAgICAgcmVwbGFjZW1lbnRzTGlzdC5pbm5lckhUTUwgPSByZXBsYWNlbWVudHNcbiAgICAgICAgICAgICAgICAubWFwKHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlZCA9ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5zdGFydHNXaXRoKFwiVDpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5zbGljZSgyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnTWFuYWdlci5tYXRjaGVyLnJlcGxhY2VQbGFjZWhvbGRlcnMociwgd2lsZGNhcmRNYXRjaGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8bGk+JCR7cmVuZGVyZWR9JCA8Y29kZT5bJHtyfV08L2NvZGU+PC9saT5gO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmpvaW4oJycpO1xuICAgICAgICAgICAgcGF0dGVybkRpdi5hcHBlbmRDaGlsZChyZXBsYWNlbWVudHNMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChwYXR0ZXJuRGl2KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXNzdW1pbmcgTWF0aEpheCBpcyBnbG9iYWxseSBhdmFpbGFibGVcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5NYXRoSmF4LnR5cGVzZXRQcm9taXNlKFtwYXR0ZXJuRGl2XSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5vTWF0Y2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICBub01hdGNoLnRleHRDb250ZW50ID0gJ05vIG1hdGNoaW5nIHBhdHRlcm5zIGZvdW5kLic7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQobm9NYXRjaCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBjbG9zZUJ1dHRvbi50ZXh0Q29udGVudCA9ICdDbG9zZSc7XG4gICAgICAgIGNsb3NlQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7IHRoaXMuaGlkZSgpOyB9O1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGFuZGxlRG9jdW1lbnRDbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSAmJiAhdGhpcy5lbGVtZW50LmNvbnRhaW5zKGUudGFyZ2V0IGFzIE5vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbidcblxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbkJ1dHRvbiBleHRlbmRzIENvbXBvbmVudHtcbiAgICBwcml2YXRlIGNvbmZpZ01hbmFnZXI6IENvbmZpZ01hbmFnZXI7XG4gICAgcHJpdmF0ZSBlbGVtZW50OiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIHNlbGVjdGlvblRpbWVvdXQ6IG51bWJlciB8IG51bGw7XG4gICAgcHJpdmF0ZSBjb25maWdEaWFsb2c6IENvbmZpZ0RpYWxvZztcbiAgICBwcml2YXRlIGhhc01hdGNoOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnTWFuYWdlcjogQ29uZmlnTWFuYWdlciwgY29uZmlnRGlhbG9nOiBDb25maWdEaWFsb2cpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb25maWdNYW5hZ2VyID0gY29uZmlnTWFuYWdlcjtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb25maWdEaWFsb2cgPSBjb25maWdEaWFsb2c7XG4gICAgICAgIHRoaXMuaGFzTWF0Y2ggPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvbmxvYWQoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpO1xuICAgICAgICB0aGlzLmF0dGFjaEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUVsZW1lbnQoKTogSFRNTEJ1dHRvbkVsZW1lbnQge1xuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYnV0dG9uLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgICAgIHdpZHRoOiAyNHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgei1pbmRleDogMTAwMDE7XG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIGA7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGF0dGFjaEV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQodGhpcy5lbGVtZW50LCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk/LnRvU3RyaW5nKCkudHJpbSgpID8/ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ0RpYWxvZy5zaG93KHNlbGVjdGVkVGV4dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoRm9ybSA9IG5ldyBNYXRjaEZvcm0odGhpcy5jb25maWdNYW5hZ2VyLCB7cGF0dGVybjogc2VsZWN0ZWRUZXh0LCByZXBsYWNlbWVudHM6IFtdfSk7XG4gICAgICAgICAgICAgICAgbWF0Y2hGb3JtLnNob3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKT8uZW1wdHkoKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdrZXl1cCcsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZXVwJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3Rpb24oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3coeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmxlZnQgPSBgJHt4fXB4YDtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IGAke3l9cHhgO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuXG4gICAgcHVibGljIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHB1YmxpYyBoYW5kbGVTZWxlY3Rpb24oKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNlbGVjdGlvblRpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25UaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gc2VsZWN0aW9uPy50b1N0cmluZygpLnRyaW0oKSA/PyAnJztcblxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNNYXRjaCA9IHRoaXMuY29uZmlnTWFuYWdlci5tYXRjaGVyLmdldE1hdGNoaW5nUGF0dGVybnMoc2VsZWN0ZWRUZXh0KS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQnV0dG9uQXBwZWFyYW5jZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gc2VsZWN0aW9uPy5nZXRSYW5nZUF0KDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSByYW5nZT8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KHJlY3QucmlnaHQgKyB3aW5kb3cucGFnZVhPZmZzZXQsIHJlY3QudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCA3MCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVCdXR0b25BcHBlYXJhbmNlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5oYXNNYXRjaCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gJ1x1MjY5OVx1RkUwRic7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudGl0bGUgPSAnVmlldyBtYXRjaGluZyBwYXR0ZXJucyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnKyc7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudGl0bGUgPSAnQWRkIG5ldyBwYXR0ZXJuJztcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBUU87OztBQ1lQLHFCQUFlO0FBQUEsRUFJWCxjQUFjO0FBQ1YsU0FBSyxXQUFXO0FBQ2hCLFNBQUssUUFBUTtBQUFBO0FBQUE7QUFJckIsaUJBQVc7QUFBQSxFQU9QLFlBQVksT0FBbUI7QUFDM0IsU0FBSyxPQUFPLElBQUk7QUFDaEIsZUFBVyxFQUFFLE1BQU0sV0FBVyxPQUFPO0FBQ2pDLFdBQUssT0FBTyxNQUFNO0FBQUE7QUFBQTtBQUFBLEVBU2xCLE9BQU8sTUFBYyxPQUFzQjtBQUMvQyxRQUFJLE9BQU8sS0FBSztBQUNoQixlQUFXLFFBQVEsTUFBTTtBQUNyQixVQUFJLENBQUMsS0FBSyxTQUFTLE9BQU87QUFDdEIsYUFBSyxTQUFTLFFBQVEsSUFBSTtBQUFBO0FBRTlCLGFBQU8sS0FBSyxTQUFTO0FBQUE7QUFFekIsU0FBSyxRQUFRO0FBQUE7QUFBQSxFQVNqQixPQUFPLE9BQStCO0FBQ2xDLFVBQU0sVUFBMEI7QUFDaEMsVUFBTSxVQUFVLElBQUk7QUFFcEIsU0FBSyxjQUFjLEtBQUssTUFBTSxPQUFPLEdBQUcsU0FBUyxJQUFJO0FBRXJELFdBQU87QUFBQTtBQUFBLEVBR0gsY0FDSixNQUNBLE9BQ0EsT0FDQSxTQUNBLGlCQUNBLFNBQ0k7QUFDSixRQUFJLFVBQVUsTUFBTSxRQUFRO0FBQ3hCLFVBQUksS0FBSyxVQUFVLFFBQVEsQ0FBQyxRQUFRLElBQUksT0FBTztB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QzlHLEVBQUUsU0FBUyxLQUFLLGNBQWMsQ0FBQyxVQUFVLFVBQVUsV0FBVyxXQUFXLFdBQVcsWUFBWSxjQUFjO0FBQUEsSUFHOUcsRUFBRSxTQUFTLE1BQU0sY0FBYyxDQUFDLGdCQUFnQjtBQUFBLElBQ2hELEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxPQUFPLGNBQWMsQ0FBQztBQUFBLElBQ2pDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBR2hDLEVBQUUsU0FBUyxLQUFLLGNBQWMsQ0FBQztBQUFBLElBQy9CLEVBQUUsU0FBUyxLQUFLLGNBQWMsQ0FBQztBQUFBLElBRS9CLEVBQUUsU0FBUyxLQUFLLGNBQWMsQ0FBQztBQUFBLElBQy9CLEVBQUUsU0FBUyxPQUFPLGNBQWMsQ0FBQztBQUFBLElBQ2pDLEVBQUUsU0FBUyxPQUFPLGNBQWMsQ0FBQztBQUFBLElBQ2pDLEVBQUUsU0FBUyxPQUFPLGNBQWMsQ0FBQztBQUFBLElBQ2pDLEVBQUUsU0FBUyxPQUFPLGNBQWMsQ0FBQztBQUFBLElBQ2pDLEVBQUUsU0FBUyxRQUFRLGNBQWMsQ0FBQztBQUFBLElBQ2xDLEVBQUUsU0FBUyxRQUFRLGNBQWMsQ0FBQztBQUFBLElBR2xDLEVBQUUsU0FBUyxLQUFLLGNBQWMsQ0FBQztBQUFBLElBQy9CLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBQ2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUFBLElBR2hDLEVBQUUsU0FBUyxNQUFNLGNBQWMsQ0FBQyxTQUFTLGFBQWE7QUFBQSxJQUN0RCxFQUFFLFNBQVMsTUFBTSxj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

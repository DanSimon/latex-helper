/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => WordPopupPlugin
});
var import_obsidian6 = __toModule(require("obsidian"));

// pattern_matcher.ts
var TrieNode = class {
  constructor() {
    this.children = {};
    this.value = null;
  }
};
var Trie = class {
  constructor(terms) {
    this.root = new TrieNode();
    for (const { term, value } of terms) {
      this.insert(term, value);
    }
  }
  insert(term, value) {
    let node = this.root;
    for (const char of term) {
      if (!node.children[char]) {
        node.children[char] = new TrieNode();
      }
      node = node.children[char];
    }
    node.value = value;
  }
  lookup(query) {
    const results = [];
    const visited = new Set();
    this._lookupHelper(this.root, query, 0, results, [], visited);
    return results;
  }
  _lookupHelper(node, query, index, results, wildcardMatches, visited) {
    if (index === query.length) {
      if (node.value !== null && !visited.has(node)) {
        results.push({
          value: node.value,
          match: wildcardMatches.slice()
        });
        visited.add(node);
      }
      return;
    }
    const char = query[index];
    if (node.children[char]) {
      this._lookupHelper(node.children[char], query, index + 1, results, wildcardMatches, visited);
    }
    if (char.match(/^[0-9a-z]+$/) && node.children["*"]) {
      const newWildcardMatches = wildcardMatches.concat(char);
      this._lookupHelper(node.children["*"], query, index + 1, results, newWildcardMatches, visited);
    }
  }
  typeAhead(query) {
    let nodes = [{ node: this.root, index: 0 }];
    const results = [];
    const collectedNodes = new Set();
    while (nodes.length > 0) {
      let nextNodes = [];
      for (const { node, index } of nodes) {
        if (index === query.length) {
          this._collectValues(node, results, collectedNodes);
        } else {
          const char = query[index];
          if (node.children[char]) {
            nextNodes.push({
              node: node.children[char],
              index: index + 1
            });
          }
          if (char.match(/^[0-9a-z]+$/) && node.children["*"]) {
            nextNodes.push({
              node: node.children["*"],
              index: index + 1
            });
          }
        }
      }
      nodes = nextNodes;
    }
    return results;
  }
  _collectValues(startNode, results, collectedNodes) {
    let queue = [startNode];
    const visitedNodes = new Set();
    while (queue.length > 0) {
      const node = queue.shift();
      if (visitedNodes.has(node)) {
        continue;
      }
      visitedNodes.add(node);
      if (node.value !== null && !collectedNodes.has(node)) {
        results.push(node.value);
        collectedNodes.add(node);
      }
      for (const childNode of Object.values(node.children)) {
        queue.push(childNode);
      }
    }
  }
};
var RegexMatcher = class {
  constructor(patterns) {
    this.patterns = patterns.map((p) => ({
      regex: new RegExp(p.pattern),
      replacements: p.replacements
    }));
  }
  addPattern(pattern) {
    this.patterns.push({
      regex: new RegExp(pattern.pattern),
      replacements: pattern.replacements
    });
  }
  getSuggestions(input) {
    const suggestions = [];
    let fastReplace = false;
    for (const pattern of this.patterns) {
      const matches = input.match(pattern.regex);
      if (matches) {
        for (const replacement of pattern.replacements) {
          let result = replacement;
          for (let i = 1; i < matches.length; i++) {
            result = result.replace(`$${i}`, matches[i] || "");
          }
          suggestions.push(result);
        }
      }
    }
    return { suggestions, fastReplace };
  }
};
var SuggestionMatcher = class {
  constructor(patterns) {
    const trieTerms = patterns.flatMap((conf) => {
      if (!conf.type) {
        return [{ term: conf.pattern, value: conf }];
      }
      return [];
    });
    this.trie = new Trie(trieTerms);
    const regexTerms = patterns.flatMap((conf) => {
      if (conf.type && conf.type === "regex") {
        return [conf];
      }
      return [];
    });
    this.regexes = new RegexMatcher(regexTerms);
  }
  replacePlaceholders(value, matches) {
    return value.replace(/\$([1-9]\d*)/g, (match, indexStr) => {
      const index = parseInt(indexStr, 10) - 1;
      if (index < matches.length) {
        return matches[index];
      }
      return match;
    });
  }
  getMatchingPatterns(searchString) {
    return this.trie.lookup(searchString);
  }
  getSuggestions(searchString) {
    const results = this.trie.lookup(searchString);
    const suggestions = [];
    let fastReplace = false;
    results.forEach(({ value: conf, match: wildcardMatches }) => {
      conf.replacements.forEach((replacement) => {
        const suggestion = this.replacePlaceholders(replacement, wildcardMatches);
        suggestions.push(suggestion);
      });
      fastReplace = fastReplace || !!conf.fastReplace;
    });
    const rs = this.regexes.getSuggestions(searchString);
    suggestions.push(...rs.suggestions);
    fastReplace = (fastReplace || rs.fastReplace) && suggestions.length === 1;
    return { suggestions, fastReplace };
  }
};

// config.ts
var DEFAULT_CONFIG = {
  renderMath: false,
  patterns: [
    { pattern: "or", replacements: ["\\lor"], fastReplace: true },
    { pattern: "and", replacements: ["\\land"], fastReplace: true },
    { pattern: "not", replacements: ["\\lnot"], fastReplace: true },
    { pattern: "=>", replacements: ["\\implies"], fastReplace: true },
    { pattern: "<=>", replacements: ["\\iff"], fastReplace: true },
    { pattern: "a", replacements: ["\\alpha", "\\aleph"] },
    { pattern: "b", replacements: ["\\beta", "\\beth"] },
    { pattern: "g", replacements: ["\\gamma", "\\gimel"] },
    { pattern: "d", replacements: ["\\delta", "\\daleth"] },
    { pattern: "e", replacements: ["\\epsilon", "\\varepsilon"] },
    { pattern: "z", replacements: ["\\zeta"] },
    { pattern: "h", replacements: ["\\eta"] },
    { pattern: "t", replacements: ["\\theta", "\\vartheta"] },
    { pattern: "i", replacements: ["\\iota"] },
    { pattern: "k", replacements: ["\\kappa"] },
    { pattern: "l", replacements: ["\\lambda"] },
    { pattern: "m", replacements: ["\\mu"] },
    { pattern: "n", replacements: ["\\nu"] },
    { pattern: "x", replacements: ["\\xi"] },
    { pattern: "o", replacements: ["\\omicron"] },
    { pattern: "p", replacements: ["\\pi", "\\varpi"] },
    { pattern: "r", replacements: ["\\rho", "\\varrho"] },
    { pattern: "s", replacements: ["\\sigma", "\\varsigma"] },
    { pattern: "u", replacements: ["\\upsilon"] },
    { pattern: "f", replacements: ["\\phi", "\\varphi"] },
    { pattern: "c", replacements: ["\\chi"] },
    { pattern: "y", replacements: ["\\psi"] },
    { pattern: "w", replacements: ["\\omega"] },
    { pattern: "E", replacements: ["\\exists"] },
    { pattern: "G", replacements: ["\\Gamma"] },
    { pattern: "D", replacements: ["\\Delta"] },
    { pattern: "T", replacements: ["\\Theta"] },
    { pattern: "I", replacements: ["\\Iota"] },
    { pattern: "L", replacements: ["\\Lambda"] },
    { pattern: "X", replacements: ["\\Xi"] },
    { pattern: "P", replacements: ["\\Pi"] },
    { pattern: "S", replacements: ["\\Sigma"] },
    { pattern: "U", replacements: ["\\Upsilon"] },
    { pattern: "F", replacements: ["\\Phi", "\\forall"] },
    { pattern: "Y", replacements: ["\\Psi"] },
    { pattern: "W", replacements: ["\\Omega"] },
    { pattern: "(", replacements: ["\\big(", "\\Big(", "\\bigg(", "\\Bigg("] },
    { pattern: ")", replacements: ["\\big)", "\\Big)", "\\bigg)", "\\Bigg)"] },
    { pattern: "[", replacements: ["\\big[", "\\Big[", "\\bigg[", "\\Bigg[", "\\lceil", "\\lfloor", "\\ulcorner", "\\llcorner"] },
    { pattern: "]", replacements: ["\\big]", "\\Big]", "\\bigg]", "\\Bigg]", "\\rceil", "\\rfloor", "\\urcorner", "\\lrcorner"] },
    { pattern: "->", replacements: ["\\rightarrow", "\\to"] },
    { pattern: "<-", replacements: ["\\leftarrow"] },
    { pattern: "<->", replacements: ["\\leftrightarrow"] },
    { pattern: "=>", replacements: ["\\implies"] },
    { pattern: "<=", replacements: ["\\leq"] },
    { pattern: ">=", replacements: ["\\geq"] },
    { pattern: "+", replacements: ["+"] },
    { pattern: "-", replacements: ["-"] },
    { pattern: "/", replacements: ["\\div"] },
    { pattern: "sum", replacements: ["\\sum"] },
    { pattern: "int", replacements: ["\\int"] },
    { pattern: "lim", replacements: ["\\lim"] },
    { pattern: "inf", replacements: ["\\infty"] },
    { pattern: "sqrt", replacements: ["\\sqrt"] },
    { pattern: "prod", replacements: ["\\prod"] },
    { pattern: "=", replacements: ["="] },
    { pattern: "!=", replacements: ["\\neq"] },
    { pattern: "~=", replacements: ["\\approx"] },
    { pattern: "~~", replacements: ["\\sim"] },
    { pattern: "<<", replacements: ["\\ll"] },
    { pattern: ">>", replacements: ["\\gg"] },
    { pattern: "in", replacements: ["\\in"], fastReplace: true },
    { pattern: "ni", replacements: ["\\ni"], fastReplace: true },
    { pattern: "subset", replacements: ["\\subset", "\\subseteq"] },
    { pattern: "supset", replacements: ["\\supset", "\\supseteq"] },
    { pattern: "empty", replacements: ["\\emptyset"], fastReplace: true },
    { pattern: "...", replacements: ["\\ldots"] },
    { pattern: "\xB0", replacements: ["\\degree"] },
    { pattern: "\xA3", replacements: ["\\pounds"] },
    { pattern: "$", replacements: ["\\$"] },
    { pattern: "%", replacements: ["\\%"] },
    { pattern: "&", replacements: ["\\&"] },
    { pattern: "hat", replacements: ["\\hat{}"] },
    { pattern: "bar", replacements: ["\\bar{}"] },
    { pattern: "tilde", replacements: ["\\tilde{}"] },
    { pattern: "vec", replacements: ["\\vec{}"] },
    { pattern: "sin", replacements: ["\\sin"], fastReplace: true },
    { pattern: "cos", replacements: ["\\cos"], fastReplace: true },
    { pattern: "tan", replacements: ["\\tan"], fastReplace: true },
    { pattern: "log", replacements: ["\\log"], fastReplace: true },
    { pattern: "ln", replacements: ["\\ln"], fastReplace: true },
    { pattern: "exp", replacements: ["\\exp"], fastReplace: true },
    { pattern: "frac", replacements: ["T:\\frac{$1}{$2}"] },
    { pattern: "binom", replacements: ["\\binom{}{}"] },
    { type: "regex", pattern: "(.*)_over$", replacements: ["\\overline{$1}"] },
    { pattern: "underline", replacements: ["\\underline{}"] },
    { pattern: "overset", replacements: ["\\overset{}{}}"] },
    { pattern: "underset", replacements: ["\\underset{}{}}"] },
    { pattern: "forall", replacements: ["\\forall"], fastReplace: true },
    { pattern: "exists", replacements: ["\\exists"], fastReplace: true },
    { pattern: "nexists", replacements: ["\\nexists"], fastReplace: true },
    { pattern: "aleph", replacements: ["\\aleph"] },
    { pattern: "hbar", replacements: ["\\hbar"] },
    { pattern: "ell", replacements: ["\\ell"] },
    { pattern: "Re", replacements: ["\\Re"] },
    { pattern: "Im", replacements: ["\\Im"] }
  ]
};
var ConfigManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async saveConfig(config) {
    await this.plugin.saveData(config);
  }
  async loadConfig() {
    this.config = Object.assign({}, DEFAULT_CONFIG, await this.plugin.loadData());
    this.matcher = new SuggestionMatcher(this.config.patterns);
  }
  async updateConfig() {
    await this.saveConfig(this.config);
    this.matcher = new SuggestionMatcher(this.config.patterns);
  }
  async resetConfig() {
    this.config = DEFAULT_CONFIG;
    await this.updateConfig();
  }
};

// suggestion_popup.ts
var import_obsidian = __toModule(require("obsidian"));
var TEMPLATE_PREFIX = "T:";
var SuggestionPopup = class {
  constructor() {
    this.element = this.createElement();
    this.isVisible = false;
    this.currentMatch = null;
    this.currentReplacements = null;
    this.fastReplace = false;
    this.selectedIndex = -1;
    this.inputHandler = null;
    this.view = null;
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    document.addEventListener("click", this.handleDocumentClick);
    document.addEventListener("keydown", this.handleKeyDown);
  }
  createElement() {
    const popup = document.createElement("div");
    popup.style.cssText = `
            position: absolute;
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            padding: 2px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: none;
            white-space: nowrap;
            z-index: 10000;
        `;
    document.body.appendChild(popup);
    return popup;
  }
  show(x, y, match, replacements, inputHandler, fastReplace = false, view) {
    this.currentMatch = match;
    this.currentReplacements = replacements;
    this.selectedIndex = -1;
    this.inputHandler = inputHandler;
    this.fastReplace = fastReplace && replacements.length === 1;
    this.element.style.left = `${x + 5}px`;
    this.element.style.bottom = `${window.innerHeight - y}px`;
    this.element.style.top = "auto";
    this.element.style.display = "block";
    this.isVisible = true;
    this.view = view;
    this.updateContent(view);
  }
  hide() {
    this.element.style.display = "none";
    this.element.innerHTML = "";
    this.isVisible = false;
    this.selectedIndex = -1;
    this.currentMatch = null;
    this.currentReplacements = null;
    this.view = null;
  }
  updateContent(view) {
    if (!this.currentMatch || !this.currentReplacements)
      return;
    this.element.innerHTML = "";
    const styleElement = document.createElement("style");
    const cssRule = `
          .rendered-math p {
            display: inline;
            margin: 0;
            padding: 0;
          }
        `;
    styleElement.textContent = cssRule;
    this.element.appendChild(styleElement);
    this.currentReplacements.forEach((option, index) => {
      const appliedReplacement = option.startsWith(TEMPLATE_PREFIX) ? option.slice(TEMPLATE_PREFIX.length) : option;
      const span = document.createElement("span");
      span.id = `suggestion-${index}`;
      span.style.cssText = `
                cursor: pointer;
                padding: 5px;
                display: inline;
            `;
      span.addEventListener("mouseover", () => {
        if (index !== this.selectedIndex) {
          span.style.background = "var(--background-secondary)";
        }
      });
      span.addEventListener("mouseout", () => {
        if (index !== this.selectedIndex) {
          span.style.background = "var(--background-primary)";
        }
      });
      span.addEventListener("click", () => {
        this.selectSuggestion(index);
      });
      const indicatorSpan = document.createElement("span");
      if (this.fastReplace && this.currentReplacements.length === 1) {
        indicatorSpan.style.cssText = `
                    color: #22c55e;
                    margin-right: 2px;
                    font-size: 0.6em;
                `;
        indicatorSpan.textContent = "\u26A1";
      } else {
        indicatorSpan.style.cssText = `
                    font-size: 0.7em;
                    color: #888;
                    margin-right: 2px;
                `;
        indicatorSpan.textContent = `${index + 1}.`;
      }
      const mathSpan = document.createElement("span");
      mathSpan.classList.add("rendered-math");
      span.appendChild(indicatorSpan);
      span.appendChild(mathSpan);
      this.element.appendChild(span);
      import_obsidian.MarkdownRenderer.renderMarkdown(`$${appliedReplacement}$`, mathSpan, view.file.path, view);
    });
  }
  updateSelectedSuggestion() {
    const suggestions = this.element.querySelectorAll('span[id^="suggestion-"]');
    suggestions.forEach((span) => {
      span.style.background = "var(--background-primary)";
    });
    if (this.selectedIndex >= 0) {
      const selectedSpan = this.element.querySelector(`#suggestion-${this.selectedIndex}`);
      if (selectedSpan) {
        selectedSpan.style.background = "var(--background-secondary)";
      }
    }
  }
  selectSuggestion(index) {
    if (!this.currentReplacements || !this.view)
      return;
    if (index >= 0 && index < this.currentReplacements.length) {
      const replacement = this.currentReplacements[index];
      if (replacement.startsWith(TEMPLATE_PREFIX)) {
        const form = new TemplateForm(replacement.slice(TEMPLATE_PREFIX.length), this.inputHandler);
        form.show();
      } else {
        const start = this.view.editor.offsetToPos(this.view.editor.posToOffset(this.view.editor.getCursor()) - this.currentMatch.length);
        this.view.editor.replaceRange(replacement, start, this.view.editor.getCursor());
      }
      this.hide();
    }
  }
  handleKeyDown(e) {
    if (!this.isVisible || !this.currentReplacements)
      return;
    if (this.fastReplace && !/^[a-zA-Z0-9]$/.test(e.key) && !["Escape", "Tab", "Backspace"].includes(e.key)) {
      this.selectSuggestion(0);
      return;
    }
    switch (e.key) {
      case "Escape":
        this.hide();
        e.preventDefault();
        break;
      case "Tab":
        e.preventDefault();
        if (this.selectedIndex < this.currentReplacements.length - 1) {
          this.selectedIndex++;
        } else {
          this.selectedIndex = 0;
        }
        this.updateSelectedSuggestion();
        break;
      case "Enter":
        if (this.selectedIndex >= 0) {
          e.preventDefault();
          this.selectSuggestion(this.selectedIndex);
        }
        break;
      default:
        if (e.key >= "1" && e.key <= "9") {
          const index = parseInt(e.key) - 1;
          if (index < this.currentReplacements.length) {
            this.selectSuggestion(index);
            e.preventDefault();
          }
        }
    }
  }
  handleDocumentClick(e) {
    if (this.isVisible && !this.element.contains(e.target)) {
      this.hide();
    }
  }
  destroy() {
    document.removeEventListener("click", this.handleDocumentClick);
    document.removeEventListener("keydown", this.handleKeyDown);
    if (this.element && this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
  }
};

// config_dialog.ts
var import_obsidian2 = __toModule(require("obsidian"));
var ConfigDialog = class extends import_obsidian2.Component {
  constructor(configManager, matchForm) {
    super();
    this.configManager = configManager;
    this.config = configManager.config;
    this.isVisible = false;
    this.matchForm = matchForm;
  }
  onload() {
    this.element = this.createElement();
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
  }
  createElement() {
    const dialog = document.createElement("div");
    dialog.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--background-secondary);
            border: 1px solid var(--background-modifier-border-focus);
            border-radius: 4px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            display: none;
            z-index: 10002;
            max-width: 80%;
            max-height: 80%;
            width: auto;
            overflow-y: auto;
        `;
    document.body.appendChild(dialog);
    return dialog;
  }
  createEditButton(conf) {
    const button = document.createElement("button");
    button.innerHTML = "\u270F\uFE0F";
    button.style.cssText = `
            margin-left: 8px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 16px;
            padding: 2px 6px;
            border-radius: 4px;
            vertical-align: middle;
        `;
    button.title = "Edit pattern";
    this.registerDomEvent(button, "click", (e) => {
      e.stopPropagation();
      this.matchForm.show(conf);
      this.hide();
    });
    return button;
  }
  show(selectedText) {
    this.element.innerHTML = "";
    const title = document.createElement("h2");
    title.innerHTML = `Matching Patterns for <code>${selectedText}</code>`;
    this.element.appendChild(title);
    const matches = this.configManager.matcher.getMatchingPatterns(selectedText);
    for (const { value, wildcardMatches } of matches) {
      const { pattern, replacements, fastReplace } = value;
      const patternDiv = document.createElement("div");
      const patternHeader = document.createElement("h3");
      patternHeader.style.display = "flex";
      patternHeader.style.alignItems = "center";
      if (fastReplace && replacements.length === 1) {
        const fastReplaceIcon = document.createElement("span");
        fastReplaceIcon.style.cssText = `
                    color: #22c55e;
                    margin-right: 8px;
                `;
        fastReplaceIcon.title = "Fast Replace Enabled";
        fastReplaceIcon.textContent = "\u26A1";
        patternHeader.appendChild(fastReplaceIcon);
      }
      const patternText = document.createElement("span");
      patternText.innerHTML = `Pattern: <code>${pattern}</code>`;
      patternHeader.appendChild(patternText);
      patternHeader.appendChild(this.createEditButton(value));
      patternDiv.appendChild(patternHeader);
      const replacementsList = document.createElement("ul");
      replacementsList.innerHTML = replacements.map((r) => {
        const rendered = (() => {
          if (r.startsWith("T:")) {
            return r.slice(2);
          } else {
            return this.configManager.matcher.replacePlaceholders(r, wildcardMatches);
          }
        })();
        return `<li>$${rendered}$ <code>[${r}]</code></li>`;
      }).join("");
      patternDiv.appendChild(replacementsList);
      this.element.appendChild(patternDiv);
      window.MathJax.typesetPromise([patternDiv]);
    }
    if (matches.length === 0) {
      const noMatch = document.createElement("p");
      noMatch.textContent = "No matching patterns found.";
      this.element.appendChild(noMatch);
    }
    const closeButton = document.createElement("button");
    closeButton.textContent = "Close";
    closeButton.onclick = () => {
      this.hide();
    };
    this.element.appendChild(closeButton);
    this.element.style.display = "block";
    this.isVisible = true;
  }
  hide() {
    this.element.style.display = "none";
    this.isVisible = false;
  }
  handleDocumentClick(e) {
    if (this.isVisible && !this.element.contains(e.target)) {
      this.hide();
    }
  }
};

// selection_button.ts
var import_obsidian3 = __toModule(require("obsidian"));
var SelectionButton = class extends import_obsidian3.Component {
  constructor(configManager, configDialog, matchForm) {
    super();
    this.configManager = configManager;
    this.selectionTimeout = null;
    this.configDialog = configDialog;
    this.hasMatch = false;
    this.matchForm = matchForm;
  }
  onload() {
    this.element = this.createElement();
    this.attachEventListeners();
  }
  createElement() {
    const button = document.createElement("button");
    button.style.cssText = `
            position: absolute;
            display: none;
            border: 1px solid #ccc;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            z-index: 10001;
            font-size: 16px;
            line-height: 24px;
            text-align: center;
            padding: 0;
        `;
    document.body.appendChild(button);
    return button;
  }
  attachEventListeners() {
    this.registerDomEvent(this.element, "click", () => {
      var _a, _b, _c;
      const selectedText = (_b = (_a = window.getSelection()) == null ? void 0 : _a.toString().trim()) != null ? _b : "";
      if (this.hasMatch) {
        this.configDialog.show(selectedText);
      } else {
        this.matchForm.show({ pattern: selectedText, replacements: [] });
      }
      (_c = window.getSelection()) == null ? void 0 : _c.empty();
      this.hide();
    });
    this.registerDomEvent(document, "keyup", () => {
      this.hide();
    });
    this.registerDomEvent(document, "mouseup", () => {
      this.handleSelection();
    });
  }
  show(x, y) {
    this.element.style.left = `${x}px`;
    this.element.style.top = `${y}px`;
    this.element.style.display = "block";
  }
  hide() {
    this.element.style.display = "none";
  }
  handleSelection() {
    if (this.selectionTimeout) {
      clearTimeout(this.selectionTimeout);
    }
    this.selectionTimeout = window.setTimeout(() => {
      var _a;
      const selection = window.getSelection();
      const selectedText = (_a = selection == null ? void 0 : selection.toString().trim()) != null ? _a : "";
      if (selectedText.length > 0) {
        this.hasMatch = this.configManager.matcher.getMatchingPatterns(selectedText).length > 0;
        this.updateButtonAppearance();
        const range = selection == null ? void 0 : selection.getRangeAt(0);
        const rect = range == null ? void 0 : range.getBoundingClientRect();
        if (rect) {
          this.show(rect.right + window.pageXOffset, rect.top + window.pageYOffset);
        }
      } else {
        this.hide();
      }
    }, 70);
  }
  updateButtonAppearance() {
    if (this.hasMatch) {
      this.element.textContent = "\u2699\uFE0F";
      this.element.title = "View matching patterns";
    } else {
      this.element.textContent = "+";
      this.element.title = "Add new pattern";
    }
  }
};

// match_form.ts
var import_obsidian4 = __toModule(require("obsidian"));
var MatchForm = class extends import_obsidian4.Component {
  constructor(configManager) {
    super();
    this.configManager = configManager;
  }
  onload() {
    this.element = this.createElement();
  }
  createElement() {
    const form = document.createElement("div");
    form.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            border-radius: 4px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 10003;
            max-width: 80%;
            max-height: 80%;
            overflow-y: auto;
            display: none;
        `;
    document.body.appendChild(form);
    return form;
  }
  updateContent() {
    var _a, _b;
    const regexHtml = `
          <div class="regex-section" style="margin-top: 15px; margin-bottom: 15px;">
              <label style="display: flex; align-items: center; gap: 8px;">
                  <input type="checkbox" id="regexPattern" ${((_a = this.matchData) == null ? void 0 : _a.type) === "regex" ? "checked" : ""}>
                  <span>Regex Pattern</span>
              </label>
              <div style="font-size: 0.8em; color: #666; margin-top: 4px;">
                  Treat pattern as a regular expression
              </div>
          </div>
        `;
    const fastReplaceHtml = `
            <div class="fast-replace-section" style="margin-top: 15px; margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 8px;">
                    <input type="checkbox" id="fastReplace" ${((_b = this.matchData) == null ? void 0 : _b.fastReplace) ? "checked" : ""}>
                    <span style="display: flex; align-items: center;">
                        Fast Replace
                        <span style="color: #22c55e; margin-left: 4px;">\u26A1</span>
                    </span>
                </label>
                <div style="font-size: 0.8em; color: #666; margin-top: 4px;">
                    Enables quick replacement with any non-alphanumeric character
                </div>
            </div>
        `;
    this.element.innerHTML = `
            <h2>${this.matchData ? "Edit Pattern" : "Create New Pattern"}</h2>
            <label for="pattern">Pattern (regex):</label>
            <input type="text" id="pattern" value="${this.matchData ? this.matchData.pattern : ""}"><br><br>
            ${regexHtml}
            ${fastReplaceHtml}
            <div id="replacements"></div>
            <button id="addReplacement">Add Replacement</button><br><br>
            <button id="saveMatch">Save</button>
            <button id="cancelMatch">Cancel</button>
        `;
    if (this.matchData) {
      this.matchData.replacements.forEach((replacement) => {
        const isTemplate = replacement.startsWith("T:");
        const actualReplacement = isTemplate ? replacement.slice(2) : replacement;
        this.addReplacementField(actualReplacement, isTemplate);
      });
    } else {
      this.addReplacementField();
    }
    this.attachEventListeners();
  }
  attachEventListeners() {
    const addReplacementButton = this.element.querySelector("#addReplacement");
    const saveMatchButton = this.element.querySelector("#saveMatch");
    const cancelMatchButton = this.element.querySelector("#cancelMatch");
    if (addReplacementButton && saveMatchButton && cancelMatchButton) {
      addReplacementButton.addEventListener("click", () => {
        this.addReplacementField();
        this.updateFastReplaceState();
      });
      saveMatchButton.addEventListener("click", () => this.saveMatch());
      cancelMatchButton.addEventListener("click", () => this.hide());
    }
  }
  updateFastReplaceState() {
    const fastReplaceCheckbox = this.element.querySelector("#fastReplace");
    const replacements = this.element.querySelectorAll("#replacements fieldset");
    if (fastReplaceCheckbox) {
      if (replacements.length > 1) {
        fastReplaceCheckbox.checked = false;
        fastReplaceCheckbox.disabled = true;
        fastReplaceCheckbox.title = "Fast replace is only available for patterns with a single replacement";
      } else {
        fastReplaceCheckbox.disabled = false;
        fastReplaceCheckbox.title = "";
      }
    }
  }
  addReplacementField(replacement = "", isTemplate = false) {
    const replacementsDiv = this.element.querySelector("#replacements");
    if (!replacementsDiv)
      return;
    const fieldSet = document.createElement("fieldset");
    fieldSet.style.cssText = `
            margin-bottom: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        `;
    fieldSet.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <div style="flex-grow: 1;">
                    <label for="replacement">Replacement:</label>
                    <input type="text" class="replacement" value="${replacement}" style="width: 100%;">
                </div>
                <div>
                    <label style="display: flex; align-items: center; gap: 4px;">
                        <input type="checkbox" class="template-checkbox" ${isTemplate ? "checked" : ""}>
                        Template
                    </label>
                </div>
                <button class="removeReplacement" style="margin-left: auto;">Remove</button>
            </div>
        `;
    const removeButton = fieldSet.querySelector(".removeReplacement");
    if (removeButton) {
      removeButton.addEventListener("click", () => {
        fieldSet.remove();
        this.updateFastReplaceState();
      });
    }
    replacementsDiv.appendChild(fieldSet);
  }
  saveMatch() {
    const patternInput = this.element.querySelector("#pattern");
    const fastReplaceCheckbox = this.element.querySelector("#fastReplace");
    const regexCheckbox = this.element.querySelector("#regexPattern");
    const replacementFieldsets = this.element.querySelectorAll("#replacements fieldset");
    if (!patternInput)
      return;
    const pattern = patternInput.value;
    const replacements = Array.from(replacementFieldsets).map((fieldset) => {
      const replacementInput = fieldset.querySelector(".replacement");
      const templateCheckbox = fieldset.querySelector(".template-checkbox");
      const replacementValue = (replacementInput == null ? void 0 : replacementInput.value) || "";
      const isTemplate = (templateCheckbox == null ? void 0 : templateCheckbox.checked) || false;
      return isTemplate ? `T:${replacementValue}` : replacementValue;
    });
    const fastReplace = (fastReplaceCheckbox == null ? void 0 : fastReplaceCheckbox.checked) || false;
    const isRegex = (regexCheckbox == null ? void 0 : regexCheckbox.checked) || false;
    if (this.matchData) {
      const oldPatternIndex = this.configManager.config.patterns.findIndex((p) => p.pattern === this.matchData.pattern);
      if (oldPatternIndex !== -1) {
        this.configManager.config.patterns.splice(oldPatternIndex, 1);
      }
    }
    this.configManager.config.patterns.push({
      pattern,
      replacements,
      fastReplace,
      ...isRegex && { type: "regex" }
    });
    this.configManager.updateConfig(this.config);
    this.hide();
  }
  show(matchData = null) {
    this.matchData = matchData;
    this.updateContent();
    this.element.style.display = "block";
  }
  hide() {
    this.element.style.display = "none";
    this.element.innerHTML = "";
  }
};

// config_view.ts
var import_obsidian5 = __toModule(require("obsidian"));
var CONFIG_VIEW_TYPE = "config-reference-view";
var ConfigView = class extends import_obsidian5.ItemView {
  constructor(leaf, configManager) {
    super(leaf);
    this.configManager = configManager;
  }
  getViewType() {
    return CONFIG_VIEW_TYPE;
  }
  getDisplayText() {
    return "LaTeX Shortcuts Reference";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const headerContainer = container.createEl("div", { cls: "config-view-header" });
    headerContainer.style.display = "flex";
    headerContainer.style.justifyContent = "space-between";
    headerContainer.style.alignItems = "center";
    headerContainer.style.marginBottom = "20px";
    headerContainer.createEl("h2", { text: "LaTeX Shortcuts Reference" });
    const closeButton = headerContainer.createEl("button", { cls: "config-view-close" });
    closeButton.style.cssText = `
            padding: 4px 8px;
            cursor: pointer;
            border-radius: 4px;
            border: 1px solid var(--background-modifier-border);
            background: var(--background-primary);
        `;
    closeButton.setText("\u2715");
    closeButton.addEventListener("click", () => {
      closeButton.addEventListener("click", () => {
        this.app.workspace.detachLeavesOfType(CONFIG_VIEW_TYPE);
      });
    });
    const searchContainer = container.createEl("div", { cls: "search-container" });
    searchContainer.style.margin = "10px 0";
    const searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "Search patterns..."
    });
    searchInput.style.width = "100%";
    searchInput.style.padding = "5px";
    const patternsContainer = container.createEl("div", { cls: "patterns-container" });
    const styleElement = container.createEl("style");
    const cssRule = `
          .rendered-math p {
            display: inline;
            margin: 0;
            padding: 0;
          }
        `;
    styleElement.textContent = cssRule;
    const categories = this.groupPatternsByCategory(this.configManager.config.patterns);
    const renderPatterns = (searchTerm = "") => {
      patternsContainer.empty();
      for (const [category, patterns] of Object.entries(categories)) {
        const filteredPatterns = patterns.filter((pattern) => pattern.pattern.toLowerCase().includes(searchTerm.toLowerCase()) || pattern.replacements.some((r) => r.toLowerCase().includes(searchTerm.toLowerCase())));
        if (filteredPatterns.length === 0)
          continue;
        const categoryEl = patternsContainer.createEl("div", { cls: "category" });
        categoryEl.style.marginBottom = "20px";
        categoryEl.createEl("h3", { text: category });
        const table = categoryEl.createEl("table");
        table.style.width = "100%";
        table.style.borderCollapse = "collapse";
        const thead = table.createEl("thead");
        const headerRow = thead.createEl("tr");
        ["Pattern", "Preview", "LaTeX"].forEach((header) => {
          const th = headerRow.createEl("th");
          th.style.textAlign = "left";
          th.style.padding = "8px";
          th.style.borderBottom = "1px solid var(--background-modifier-border)";
          th.setText(header);
        });
        const tbody = table.createEl("tbody");
        filteredPatterns.forEach((pattern) => {
          pattern.replacements.forEach((replacement, idx) => {
            var _a;
            const row = tbody.createEl("tr");
            const patternCell = row.createEl("td");
            patternCell.style.verticalAlign = "middle";
            if (idx === 0) {
              if (pattern.fastReplace) {
                const icon = patternCell.createEl("span");
                icon.style.cssText = `
                                    color: #22c55e;
                                    margin-right: 2px;
                                    font-size: 0.8em;
                                `;
                icon.setAttribute("title", "Fast Replace Enabled");
                icon.setText("\u26A1");
              }
              if (pattern.type && pattern.type == "regex") {
                const icon = patternCell.createEl("span");
                icon.style.cssText = `
                                    color: #22c55e;
                                    margin-right: 2px;
                                    font-size: 0.8em;
                                `;
                icon.setAttribute("title", "Regex Pattern");
                icon.setText("R");
              }
              patternCell.createEl("code", { text: pattern.pattern });
            }
            patternCell.style.borderBottom = idx === pattern.replacements.length - 1 ? "2px solid var(--background-modifier-border-focus)" : "1px solid var(--background-modifier-border)";
            const previewCell = row.createEl("td", { cls: "rendered-math" });
            previewCell.style.verticalAlign = "middle";
            previewCell.style.borderBottom = patternCell.style.borderBottom;
            const cleanReplacement = replacement.startsWith("T:") ? replacement.slice(2) : replacement;
            import_obsidian5.MarkdownRenderer.renderMarkdown(`$${cleanReplacement}$`, previewCell, ((_a = this.leaf.view.file) == null ? void 0 : _a.path) || "", this);
            const latexCell = row.createEl("td");
            latexCell.style.verticalAlign = "middle";
            latexCell.style.borderBottom = patternCell.style.borderBottom;
            latexCell.createEl("code", { text: replacement });
          });
        });
      }
    };
    searchInput.addEventListener("input", (e) => {
      const searchTerm = e.target.value;
      renderPatterns(searchTerm);
    });
    renderPatterns();
  }
  groupPatternsByCategory(patterns) {
    const categories = {
      "Logical Operators": [],
      "Greek Letters": [],
      "Mathematical Operators": [],
      "Set Symbols": [],
      "Arrows": [],
      "Functions": [],
      "Parentheses": [],
      "Other": []
    };
    patterns.forEach((pattern) => {
      if (pattern.replacements.some((r) => r.includes("\\lor") || r.includes("\\land") || r.includes("\\lnot"))) {
        categories["Logical Operators"].push(pattern);
      } else if (pattern.replacements.some((r) => r.includes("\\alpha") || r.includes("\\beta") || r.includes("\\gamma"))) {
        categories["Greek Letters"].push(pattern);
      } else if (pattern.replacements.some((r) => r.includes("\\sum") || r.includes("\\prod") || r.includes("\\int"))) {
        categories["Mathematical Operators"].push(pattern);
      } else if (pattern.replacements.some((r) => r.includes("\\in") || r.includes("\\subset"))) {
        categories["Set Symbols"].push(pattern);
      } else if (pattern.replacements.some((r) => r.includes("\\rightarrow") || r.includes("\\leftarrow"))) {
        categories["Arrows"].push(pattern);
      } else if (pattern.replacements.some((r) => r.includes("\\sin") || r.includes("\\cos") || r.includes("\\log"))) {
        categories["Functions"].push(pattern);
      } else if (pattern.replacements.some((r) => r.includes("\\big") || r.includes("\\Big"))) {
        categories["Parentheses"].push(pattern);
      } else {
        categories["Other"].push(pattern);
      }
    });
    Object.keys(categories).forEach((key) => {
      if (categories[key].length === 0) {
        delete categories[key];
      }
    });
    return categories;
  }
};

// main.ts
var WordPopupPlugin = class extends import_obsidian6.Plugin {
  async onload() {
    this.configManager = new ConfigManager(this);
    await this.configManager.loadConfig();
    this.suggestionPopup = new SuggestionPopup();
    this.matchForm = new MatchForm(this.configManager);
    this.configDialog = new ConfigDialog(this.configManager, this.matchForm);
    this.selectionButton = new SelectionButton(this.configManager, this.configDialog, this.matchForm);
    this.addChild(this.selectionButton);
    this.addChild(this.configDialog);
    this.addChild(this.matchForm);
    this.registerEvent(this.app.workspace.on("editor-change", (editor, view) => {
      this.handleEditorChange(editor, view);
    }));
    this.registerView(CONFIG_VIEW_TYPE, (leaf) => new ConfigView(leaf, this.configManager));
    this.addRibbonIcon("sigma", "Open LaTeX Reference", async () => {
      const { workspace } = this.app;
      let leaf = workspace.getLeavesOfType(CONFIG_VIEW_TYPE)[0];
      if (!leaf) {
        leaf = workspace.getRightLeaf(false);
        await leaf.setViewState({
          type: CONFIG_VIEW_TYPE,
          active: true
        });
      }
      workspace.revealLeaf(leaf);
    });
    console.log("Plugin Loaded");
  }
  onunload() {
    this.suggestionPopup.destroy();
  }
  async handleEditorChange(editor, view) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const wordUnderCursor = this.getWordUnderCursor(line, cursor.ch);
    const suggestions = this.configManager.matcher.getSuggestions(wordUnderCursor);
    if (suggestions.suggestions.length > 0) {
      const coords = editor.coordsAtPos(cursor);
      if (!coords)
        return;
      this.suggestionPopup.show(coords.left, coords.top, wordUnderCursor, suggestions.suggestions, null, suggestions.fastReplace, view);
    } else {
      this.suggestionPopup.hide();
    }
  }
  hasUnclosedMathSection(str) {
    let inMathMode = false;
    let isDoubleDollar = false;
    for (let i = 0; i < str.length; i++) {
      if (str[i] === "\\" && i + 1 < str.length && str[i + 1] === "$") {
        i++;
        continue;
      }
      if (str[i] === "$" && i + 1 < str.length && str[i + 1] === "$") {
        if (!inMathMode) {
          inMathMode = true;
          isDoubleDollar = true;
          i++;
        } else if (isDoubleDollar) {
          inMathMode = false;
          isDoubleDollar = false;
          i++;
        }
        continue;
      }
      if (str[i] === "$") {
        if (!inMathMode) {
          inMathMode = true;
          isDoubleDollar = false;
        } else if (!isDoubleDollar) {
          inMathMode = false;
        }
      }
    }
    return inMathMode;
  }
  getWordUnderCursor(lineStr, cursorPos) {
    if (!this.hasUnclosedMathSection(lineStr.slice(0, cursorPos))) {
      return "";
    }
    let i = lineStr.length - 1;
    while (i >= 0) {
      if (lineStr[i] == "$" || lineStr[i] == " ") {
        i += 1;
        break;
      } else {
        i -= 1;
      }
    }
    if (i <= 0) {
      return lineStr;
    }
    return lineStr.substr(i);
  }
};
//# sourceMappingURL=data:application/json;base64,
